<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Meta.Vlc</name>
    </assembly>
    <members>
        <member name="T:Meta.Vlc.AudioDevice">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_device_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.AudioDeviceList">
            <summary>
                A list wrapper for <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_device_t" /> linked list struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.AudioEqualizer">
            <summary>
                Audio equalizer of VLC player.
            </summary>
        </member>
        <member name="M:Meta.Vlc.AudioEqualizer.#ctor">
            <summary>
                Create a new default equalizer, with all frequency values zeroed.
            </summary>
        </member>
        <member name="M:Meta.Vlc.AudioEqualizer.#ctor(Meta.Vlc.PresetAudioEqualizerType)">
            <summary>
                Create a new equalizer, with initial frequency values copied from an existing preset.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Meta.Vlc.AudioEqualizer.#ctor(System.UInt32)">
            <summary>
                Create a new equalizer, with initial frequency values copied from an existing preset.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Meta.Vlc.AudioEqualizer.IsLibLoaded">
            <summary>
                获取一个值,该值指示当前模块是否被载入
            </summary>
        </member>
        <member name="P:Meta.Vlc.AudioEqualizer.PresetEqualizerCount">
            <summary>
                Get the number of equalizer presets.
            </summary>
        </member>
        <member name="P:Meta.Vlc.AudioEqualizer.EqualizerBandCount">
            <summary>
                Get the number of distinct frequency bands for an equalizer.
            </summary>
        </member>
        <member name="P:Meta.Vlc.AudioEqualizer.Preamp">
            <summary>
                Get or set the current pre-amplification value from an equalizer.
            </summary>
        </member>
        <member name="P:Meta.Vlc.AudioEqualizer.Item(System.UInt32)">
            <summary>
                Get or set the amplification value for a particular equalizer frequency band.
            </summary>
            <param name="band">frequency band index.</param>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.AudioEqualizer.GetPresetEqualizerName(System.UInt32)">
            <summary>
                Get the name of a particular equalizer preset.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.AudioEqualizer.GetEqualizerBandFrequency(System.UInt32)">
            <summary>
                Get a particular equalizer band frequency.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.AudioOutput">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.AudioOutputList">
            <summary>
                A list wrapper for <see cref="T:Meta.Vlc.AudioOutput" /> linked list struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.AudioOutputChannel">
            <summary>
                Audio channels
            </summary>
        </member>
        <member name="F:Meta.Vlc.EventType.MediaMetaChanged">
            <summary>
                Metadata of a <see cref="T:Meta.Vlc.VlcMedia" /> changed
            </summary>
        </member>
        <member name="F:Meta.Vlc.EventType.MediaSubItemAdded">
            <summary>
                Subitem was added to a <see cref="T:Meta.Vlc.VlcMedia" />
            </summary>
            <seealso cref="!:VlcMedia.Subitems" />
        </member>
        <member name="F:Meta.Vlc.EventType.MediaDurationChanged">
            <summary>
                Duration of a <see cref="T:Meta.Vlc.VlcMedia" /> changed
            </summary>
            <seealso cref="P:Meta.Vlc.VlcMedia.Duration" />
        </member>
        <member name="F:Meta.Vlc.EventType.MediaParsedChanged">
            <summary>
                Parsing state of a <see cref="T:Meta.Vlc.VlcMedia" /> changed
            </summary>
            <seealso cref="!:VlcMedia.ParseWithOptionAsync" />
            <seealso cref="!:VlcMedia.ParseStatus" />
            <seealso cref="!:VlcMedia.ParseStop" />
        </member>
        <member name="F:Meta.Vlc.EventType.MediaFreed">
            <summary>
                A <see cref="T:Meta.Vlc.VlcMedia" /> was freed
            </summary>
        </member>
        <member name="F:Meta.Vlc.EventType.MediaStateChanged">
            <summary>
                \link #libvlc_state_t State\endlink of the <see cref="T:Meta.Vlc.VlcMedia" /> changed
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_state" />
        </member>
        <member name="F:Meta.Vlc.EventType.MediaSubItemTreeAdded">
            <summary>
                Subitem tree was added to a <see cref="T:Meta.Vlc.VlcMedia" />
            </summary>
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListItemAdded">
            A <see cref="T:Meta.Vlc.VlcMedia"/> was added to a
            \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListWillAddItem">
            A <see cref="T:Meta.Vlc.VlcMedia"/> is about to get
            added to a \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListItemDeleted">
            A <see cref="T:Meta.Vlc.VlcMedia"/> was deleted from
            a \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListWillDeleteItem">
            A <see cref="T:Meta.Vlc.VlcMedia"/> is about to get
            deleted from a \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListEndReached">
            A \link #libvlc_media_list_t media list\endlink has reached the
            end.
            All \link #libvlc_media_t items\endlink were either added (in
            case of a \ref libvlc_media_discoverer_t) or parsed (preparser).
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListViewItemAdded">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListViewWillAddItem">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListViewItemDeleted">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListViewWillDeleteItem">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListPlayerPlayed">
            Playback of a \link #libvlc_media_list_player_t media list
            player\endlink has started.
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListPlayerNextItemSet">
            The current \link #libvlc_media_t item\endlink of a
            \link #libvlc_media_list_player_t media list player\endlink
            has changed to a different item.
        </member>
        <member name="F:Meta.Vlc.EventType.MediaListPlayerStopped">
            Playback of a \link #libvlc_media_list_player_t media list
            player\endlink has stopped.
        </member>
        <member name="F:Meta.Vlc.EventType.RendererDiscovererItemAdded">
            A new \link #libvlc_renderer_item_t renderer item\endlink was found by a
            \link #libvlc_renderer_discoverer_t renderer discoverer\endlink.
            The renderer item is valid until deleted.
        </member>
        <member name="F:Meta.Vlc.EventType.RendererDiscovererItemDeleted">
            A previously discovered \link #libvlc_renderer_item_t renderer item\endlink
            was deleted by a \link #libvlc_renderer_discoverer_t renderer discoverer\endlink.
            The renderer item is no longer valid.
        </member>
        <member name="T:Meta.Vlc.LibVlcException">
            <summary>
                A base class of LibVlc exceptions.
            </summary>
        </member>
        <member name="M:Meta.Vlc.LibVlcException.#ctor(System.String)">
            <summary>
                Create exception with a message.
            </summary>
            <param name="message">exception message</param>
        </member>
        <member name="M:Meta.Vlc.LibVlcException.#ctor(System.String,System.Exception)">
            <summary>
                Create exception with a message and a inner exception.
            </summary>
            <param name="message">exception message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:Meta.Vlc.NoLibVlcFunctionAttributeException">
            <summary>
                If a LibVlc function don't have <see cref="T:Meta.Vlc.Interop.LibVlcFunctionAttribute" />, this exception will be throwed.
            </summary>
        </member>
        <member name="M:Meta.Vlc.NoLibVlcFunctionAttributeException.#ctor">
            <summary>
                Create a <see cref="T:Meta.Vlc.NoLibVlcFunctionAttributeException" />.
            </summary>
        </member>
        <member name="T:Meta.Vlc.FunctionNotFoundException">
            <summary>
                If a function can't be found in LibVlc dlls, this exception will be throwed, maybe we should check the LibVlc
                version what the function need.
            </summary>
        </member>
        <member name="M:Meta.Vlc.FunctionNotFoundException.#ctor(Meta.Vlc.Interop.LibVlcFunctionAttribute,Meta.Vlc.Interop.LibVlcVersion)">
            <summary>
                Create a  <see cref="T:Meta.Vlc.FunctionNotFoundException" /> with function's infomation and LibVlc's version.
            </summary>
            <param name="functionInfo">infomation of function</param>
            <param name="libvlcVersion">version of LibVlc</param>
        </member>
        <member name="M:Meta.Vlc.FunctionNotFoundException.#ctor(Meta.Vlc.Interop.LibVlcFunctionAttribute,Meta.Vlc.Interop.LibVlcVersion,System.Exception)">
            <summary>
                Create a  <see cref="T:Meta.Vlc.FunctionNotFoundException" /> with function's infomation, LibVlc's version and a inner
                exception.
            </summary>
            <param name="functionInfo">infomation of function</param>
            <param name="libvlcVersion">version of LibVlc</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="P:Meta.Vlc.FunctionNotFoundException.FunctionInfomation">
            <summary>
                Infomation of function what not found.
            </summary>
        </member>
        <member name="P:Meta.Vlc.FunctionNotFoundException.LibVlcVersion">
            <summary>
                Versiong infomation of current LibVlc.
            </summary>
        </member>
        <member name="T:Meta.Vlc.FunctionNotAvailableException">
            <summary>
                If a function is not available in current version LibVlc, but you call this, the exception will be throwed.
            </summary>
        </member>
        <member name="M:Meta.Vlc.FunctionNotAvailableException.#ctor(Meta.Vlc.Interop.LibVlcFunctionAttribute,Meta.Vlc.Interop.LibVlcVersion)">
            <summary>
                Create a <see cref="T:Meta.Vlc.FunctionNotAvailableException" /> with function's infomation and LibVlc's version.
            </summary>
            <param name="functionInfo">infomation of function</param>
            <param name="libvlcVersion">version of LibVlc</param>
        </member>
        <member name="P:Meta.Vlc.FunctionNotAvailableException.FunctionInfomation">
            <summary>
                Infomation of function what not found.
            </summary>
        </member>
        <member name="P:Meta.Vlc.FunctionNotAvailableException.LibVlcVersion">
            <summary>
                Versiong infomation of current LibVlc.
            </summary>
        </member>
        <member name="T:Meta.Vlc.VersionStringParseException">
            <summary>
                If a version string parse failed, this exception will be throwed.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VersionStringParseException.#ctor(System.String)">
            <summary>
                Create a <see cref="T:Meta.Vlc.VersionStringParseException" /> with parse failed version string.
            </summary>
            <param name="versionString"></param>
        </member>
        <member name="P:Meta.Vlc.VersionStringParseException.VersionString">
            <summary>
                Parse failed version string.
            </summary>
        </member>
        <member name="T:Meta.Vlc.LibVlcLoadLibraryException">
            <summary>
                If some exception throwed when loading LibVlc, this exception will be throwed. Maybe you should check the LibVlc
                target platform and your app target platform.
            </summary>
        </member>
        <member name="M:Meta.Vlc.LibVlcLoadLibraryException.#ctor">
            <summary>
                Create a <see cref="T:Meta.Vlc.LibVlcLoadLibraryException" />.
            </summary>
        </member>
        <member name="M:Meta.Vlc.LibVlcLoadLibraryException.#ctor(System.Exception)">
            <summary>
                Create a <see cref="T:Meta.Vlc.LibVlcLoadLibraryException" /> with a inner exception.
            </summary>
        </member>
        <member name="T:Meta.Vlc.VlcCreateFailException">
            <summary>
                If create a new Vlc instence return NULL, this exception will be throwed. Maybe you should check your Vlc options.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcCreateFailException.#ctor">
            <summary>
                Create a <see cref="T:Meta.Vlc.VlcCreateFailException" />.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcCreateFailException.#ctor(System.String)">
            <summary>
                Create a <see cref="T:Meta.Vlc.VlcCreateFailException" /> with some message.
            </summary>
        </member>
        <member name="T:Meta.Vlc.MediaParsedStatus">
            <summary>
                Parse status used sent by <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" /> or returned by
                <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status" />()
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status" />
        </member>
        <member name="T:Meta.Vlc.MediaParseOption">
            <summary>
                Parse flags used by <see cref="!:VlcMedia.ParseWithOptionAsync" />
            </summary>
        </member>
        <member name="F:Meta.Vlc.MediaParseOption.ParseLocal">
            <summary>
                Parse media if it's a local file
            </summary>
        </member>
        <member name="F:Meta.Vlc.MediaParseOption.ParseNetwork">
            <summary>
                Parse media even if it's a network file
            </summary>
        </member>
        <member name="F:Meta.Vlc.MediaParseOption.FetchLocal">
            <summary>
                Fetch meta and covert art using local resources
            </summary>
        </member>
        <member name="F:Meta.Vlc.MediaParseOption.FetchNetwork">
            <summary>
                Fetch meta and covert art using network resources
            </summary>
        </member>
        <member name="F:Meta.Vlc.MediaParseOption.DoInteract">
            <summary>
                Interact with the user (via libvlc_dialog_cbs) when preparsing this item
                (and not its sub items). Set this flag in order to receive a callback
                when the input is asking for credentials.
            </summary>
        </member>
        <member name="T:Meta.Vlc.MediaTrackInfo">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_info_t" /> struct.
            </summary>
        </member>
        <member name="M:Meta.Vlc.MediaTrackInfo.CreateFromPointer(Meta.Vlc.Interop.Media.libvlc_media_track_info_t*)">
            <summary>
                Create a media track from a pointer, it will distinguish type of media track auto.
            </summary>
            <param name="pointer">pointer of media track</param>
            <returns>a audio track, video track, subtitle track or unknown track</returns>
        </member>
        <member name="T:Meta.Vlc.AudioTrackInfo">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_info_t_audio" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.VideoTrackInfo">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_info_t_video" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.UnknownTrackInfo">
            <summary>
                A wrapper for other media track info.
            </summary>
        </member>
        <member name="T:Meta.Vlc.MediaTrackInfoList">
            <summary>
                A list wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_info_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.MouseButton">
            <summary>
                A enum of mouse button.
            </summary>
        </member>
        <member name="F:Meta.Vlc.MouseButton.Left">
            <summary>
                The left button of mouse.
            </summary>
        </member>
        <member name="F:Meta.Vlc.MouseButton.Right">
            <summary>
                The right button of mouse.
            </summary>
        </member>
        <member name="F:Meta.Vlc.MouseButton.Other">
            <summary>
                Other buttons of mouse, it is not commonly used.
            </summary>
        </member>
        <member name="T:Meta.Vlc.NavigateMode">
            <summary>
                Navigation mode
            </summary>
        </member>
        <member name="T:Meta.Vlc.Position">
            <summary>
                Enumeration of values used to set position (e.g. of video title).
            </summary>
        </member>
        <member name="T:Meta.Vlc.InteropHelper">
            <summary>
                Some helper method of interopping with unmanaged dlls.
            </summary>
        </member>
        <member name="M:Meta.Vlc.InteropHelper.PtrToString(System.IntPtr,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
                Convert a pointer of string to manmaged <see cref="T:System.String" />.
            </summary>
            <param name="ptr">pointer of string</param>
            <param name="count">count of string, -1 mean auto check the end char</param>
            <param name="toBeFree">free this pointer when convert over</param>
            <param name="encoding">encoding of string</param>
            <returns>result string</returns>
        </member>
        <member name="M:Meta.Vlc.InteropHelper.StringToPtr(System.String)">
            <summary>
                Pinned a <see cref="T:System.String" /> to get pointer of this, you should call <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> when all is
                over.
            </summary>
            <param name="str">string you need pinned</param>
            <returns>GCHandle of <see cref="T:System.String" />, you can call <see cref="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject" /> to get pointer.</returns>
        </member>
        <member name="M:Meta.Vlc.InteropHelper.PtrsToStringArray(System.IntPtr[],System.Int32)">
            <summary>
                Convert a pointer array to <see cref="T:System.String" /> array.
            </summary>
            <param name="ptrs">pointer array</param>
            <param name="length">length of pointer array</param>
            <returns><see cref="T:System.String" /> array</returns>
        </member>
        <member name="M:Meta.Vlc.InteropHelper.StringArrayToPtr(System.String[])">
            <summary>
                Get a pointer of <see cref="T:System.String" /> array.
            </summary>
            <param name="strings"><see cref="T:System.String" /> array</param>
            <returns>pointer of <see cref="T:System.String" /> array</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Event.libvlc_callback_t">
            <summary>
                Callback function notification
            </summary>
            <param name="p_event">the event triggering the callback</param>
            <param name="data"></param>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaMetaChanged">
            <summary>
                Metadata of a \link #libvlc_media_t media item\endlink changed
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaSubItemAdded">
            <summary>
                Subitem was added to a \link #libvlc_media_t media item\endlink
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_subitems" />
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaDurationChanged">
            <summary>
                Duration of a \link #libvlc_media_t media item\endlink changed
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_duration" />
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaParsedChanged">
            <summary>
                Parsing state of a \link #libvlc_media_t media item\endlink changed
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_stop" />
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaFreed">
            <summary>
                A \link #libvlc_media_t media item\endlink was freed
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaStateChanged">
            <summary>
                \link #libvlc_state_t State\endlink of the \link #libvlc_media_t media item\endlink changed
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_state" />
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaSubItemTreeAdded">
            <summary>
                Subitem tree was added to a \link #libvlc_media_t media item\endlink
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListItemAdded">
            A \link #libvlc_media_t media item\endlink was added to a
            \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListWillAddItem">
            A \link #libvlc_media_t media item\endlink is about to get
            added to a \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListItemDeleted">
            A \link #libvlc_media_t media item\endlink was deleted from
            a \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListWillDeleteItem">
            A \link #libvlc_media_t media item\endlink is about to get
            deleted from a \link #libvlc_media_list_t media list\endlink.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListEndReached">
            A \link #libvlc_media_list_t media list\endlink has reached the
            end.
            All \link #libvlc_media_t items\endlink were either added (in
            case of a \ref libvlc_media_discoverer_t) or parsed (preparser).
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListViewItemAdded">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListViewWillAddItem">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListViewItemDeleted">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListViewWillDeleteItem">
            \deprecated No longer used.
            This belonged to the removed libvlc_media_list_view_t
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListPlayerPlayed">
            Playback of a \link #libvlc_media_list_player_t media list
            player\endlink has started.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListPlayerNextItemSet">
            The current \link #libvlc_media_t item\endlink of a
            \link #libvlc_media_list_player_t media list player\endlink
            has changed to a different item.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaListPlayerStopped">
            Playback of a \link #libvlc_media_list_player_t media list
            player\endlink has stopped.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_RendererDiscovererItemAdded">
            A new \link #libvlc_renderer_item_t renderer item\endlink was found by a
            \link #libvlc_renderer_discoverer_t renderer discoverer\endlink.
            The renderer item is valid until deleted.
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_RendererDiscovererItemDeleted">
            A previously discovered \link #libvlc_renderer_item_t renderer item\endlink
            was deleted by a \link #libvlc_renderer_discoverer_t renderer discoverer\endlink.
            The renderer item is no longer valid.
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Event.libvlc_event_attach">
            <summary>
                Register for an event notification.
            </summary>
            <param name="p_event_manager">
                the event manager to which you want to attach to.
                Generally it is obtained by vlc_my_object_event_manager() where
                my_object is the object you want to listen to.
            </param>
            <param name="i_event_type">the desired event to which we want to listen</param>
            <param name="f_callback">the function to call when i_event_type occurs</param>
            <param name="user_data">user provided data to carry with the event</param>
            <returns>0 on success, ENOMEM on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Event.libvlc_event_detach">
            <summary>
                Unregister an event notification.
            </summary>
            <param name="p_event_manager">the event manager</param>
            <param name="i_event_type">the desired event to which we want to unregister</param>
            <param name="f_callback">the function to call when i_event_type occurs</param>
            <param name="p_user_data">user provided data to carry with the event</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Event.libvlc_event_type_name">
            <summary>
                Get an event's type name.
            </summary>
            <param name="event_type">the desired event</param>
            <returns></returns>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_t.type">
            <summary>
                Event type
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Core.Event.libvlc_event_e" />
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Event.libvlc_event_t.p_obj">
            <summary>
                Object emitting the event
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Logging.libvlc_log_level">
            <summary>
                Logging messages level.
            </summary>
            <remarks>
                Future LibVLC versions may define new levels.
            </remarks>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Logging.libvlc_log_level.LIBVLC_DEBUG">
            <summary>
                Debug message
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Logging.libvlc_log_level.LIBVLC_NOTICE">
            <summary>
                Important informational messag
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Logging.libvlc_log_level.LIBVLC_WARNING">
            <summary>
                Warning (potential error) message
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Core.Logging.libvlc_log_level.LIBVLC_ERROR">
            <summary>
                Error message
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Logging.libvlc_log_get_context">
             Gets log message debug infos.
            
             This function retrieves self-debug information about a log message:
             - the name of the VLC module emitting the message,
             - the name of the source code module (i.e. file) and
             - the line number within the source code module.
            
             The returned module name and file name will be NULL if unknown.
             The returned line number will similarly be zero if unknown.
            
             \param ctx message context (as passed to the @ref libvlc_log_cb callback)
             \param module module name storage (or NULL) [OUT]
             \param file source code file name storage (or NULL) [OUT]
             \param line source code file line number storage (or NULL) [OUT]
             \warning The returned module name and source code file name, if non-NULL,
             are only valid until the logging callback returns.
            
             \version LibVLC 2.1.0 or later
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Logging.libvlc_log_get_object">
             Gets log message info.
            
             This function retrieves meta-information about a log message:
             - the type name of the VLC object emitting the message,
             - the object header if any, and
             - a temporaly-unique object identifier.
            
             This information is mainly meant for <b>manual</b> troubleshooting.
            
             The returned type name may be "generic" if unknown, but it cannot be NULL.
             The returned header will be NULL if unset; in current versions, the header
             is used to distinguish for VLM inputs.
             The returned object ID will be zero if the message is not associated with
             any VLC object.
            
             \param ctx message context (as passed to the @ref libvlc_log_cb callback)
             \param name object name storage (or NULL) [OUT]
             \param header object header (or NULL) [OUT]
             \param line source code file line number storage (or NULL) [OUT]
             \warning The returned module name and source code file name, if non-NULL,
             are only valid until the logging callback returns.
            
             \version LibVLC 2.1.0 or later
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Logging.libvlc_log_unset">
             Unsets the logging callback.
            
             This function deregisters the logging callback for a LibVLC instance.
             This is rarely needed as the callback is implicitly unset when the instance
             is destroyed.
            
             \note This function will wait for any pending callbacks invocation to
             complete (causing a deadlock if called from within the callback).
            
             \param p_instance libvlc instance
             \version LibVLC 2.1.0 or later
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Logging.libvlc_log_set_file">
            Sets up logging to a file.
            \param p_instance libvlc instance
            \param stream FILE pointer opened for writing
                    (the FILE pointer must remain valid until libvlc_log_unset())
            \version LibVLC 2.1.0 or later
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Error.libvlc_errmsg">
            <summary>
                A human-readable error message for the last LibVLC error in the calling
                thread. The resulting string is valid until another error occurs (at least
                until the next LibVLC call).
            </summary>
            <remarks>This will be NULL if there was no error.</remarks>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Error.libvlc_clearerr">
            <summary>
                Clears the LibVLC error status for the current thread. This is optional.
                By default, the error status is automatically overridden when a new error
                occurs, and destroyed when the thread exits.
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Error.libvlc_vprinterr">
            <summary>
                Sets the LibVLC error status and message for the current thread.
                Any previous error is overridden.
            </summary>
            <param name="fmt">the format string</param>
            <param name="ap">the arguments</param>
            <returns>a nul terminated string in any case</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Error.libvlc_printerr">
            <summary>
                Sets the LibVLC error status and message for the current thread.
                Any previous error is overridden.
            </summary>
            <param name="fmt">the format string</param>
            <param name="args">the arguments</param>
            <returns>a nul terminated string in any case</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_new">
            <summary>
                Create and initialize a libvlc instance.
                This functions accept a list of "command line" arguments similar to the
                main(). These arguments affect the LibVLC instance default configuration.
            </summary>
            <param name="argc">the number of arguments (should be 0)</param>
            <param name="argv">the number of arguments (should be NULL)</param>
            <remarks>
                LibVLC may create threads. Therefore, any thread-unsafe process
                initialization must be performed before calling libvlc_new(). In particular
                and where applicable:
                - setlocale() and textdomain(),
                - setenv(), unsetenv() and putenv(),
                - with the X11 display system, XInitThreads()
                (see also libvlc_media_player_set_xwindow()) and
                - on Microsoft Windows, SetErrorMode().
                - sigprocmask() shall never be invoked; pthread_sigmask() can be used.
                On POSIX systems, the SIGCHLD signal <b>must not</b> be ignored, i.e. the
                signal handler must set to SIG_DFL or a function pointer, not SIG_IGN.
                Also while LibVLC is active, the wait() function shall not be called, and
                any call to waitpid() shall use a strictly positive value for the first
                parameter (i.e. the PID). Failure to follow those rules may lead to a
                deadlock or a busy loop.
                On Microsoft Windows, setting the default DLL directories to SYSTEM32
                exclusively is strongly recommended for security reasons:
                <para />
                SetDefaultDllDirectories(LOAD_LIBRARY_SEARCH_SYSTEM32);
                <para />
                <para />
                Arguments are meant to be passed from the command line to LibVLC, just like
                VLC media player does. The list of valid arguments depends on the LibVLC
                version, the operating system and platform, and set of available LibVLC
                plugins. Invalid or unsupported arguments will cause the function to fail
                (i.e. return NULL). Also, some arguments may alter the behaviour or
                otherwise interfere with other LibVLC functions.
                <para />
                There is absolutely no warranty or promise of forward, backward and
                cross-platform compatibility with regards to <see cref="T:Meta.Vlc.Interop.Core.libvlc_new" /> arguments.
                We recommend that you do not use them, other than when debugging.
            </remarks>
            <returns>the libvlc instance or NULL in case of error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_release">
            <summary>
                Decrement the reference count of a libvlc instance, and destroy it
                if it reaches zero.
            </summary>
            <param name="p_instance">the instance to destroy</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_retain">
            <summary>
                Increments the reference count of a libvlc instance.
                The initial reference count is 1 after <see cref="T:Meta.Vlc.Interop.Core.libvlc_new" /> returns.
            </summary>
            <param name="p_instance">the instance to reference</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_add_intf">
            <summary>
                Try to start a user interface for the libvlc instance.
            </summary>
            <param name="p_instance">the instance</param>
            <param name="name">interface name, or NULL for default</param>
            <returns>0 on success, -1 on error.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_set_exit_handler">
            <summary>
                Registers a callback for the LibVLC exit event. This is mostly useful if
                the VLC playlist and/or at least one interface are started with
                <see cref="!:libvlc_playlist_play" /> or <see cref="T:Meta.Vlc.Interop.Core.libvlc_add_intf" /> respectively.
                Typically, this function will wake up your application main loop (from
                another thread).
            </summary>
            <param name="p_instance">LibVLC instance</param>
            <param name="callback">
                callback to invoke when LibVLC wants to exit, or NULL to disable the exit handler (as by
                default)
            </param>
            <param name="opaque">data pointer for the callback</param>
            <remarks>
                This function should be called before the playlist or interface are
                started. Otherwise, there is a small race condition: the exit event could
                be raised before the handler is registered.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_set_user_agent">
            <summary>
                Sets the application name. LibVLC passes this as the user agent string
                when a protocol requires it.
            </summary>
            <param name="p_instance">LibVLC instance</param>
            <param name="name">human-readable application name, e.g. "FooBar player 1.2.3"</param>
            <param name="http">HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0"</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_set_app_id">
            <summary>
                Sets some meta-information about the application.
            </summary>
            <param name="p_instance">LibVLC instance</param>
            <param name="id">Java-style application identifier, e.g. "com.acme.foobar"</param>
            <param name="version">application version numbers, e.g. "1.2.3"</param>
            <param name="icon">application icon name, e.g. "foobar"</param>
            <seealso cref="T:Meta.Vlc.Interop.Core.libvlc_set_user_agent" />
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_get_version">
            <summary>
                Retrieve libvlc version.
                <para />
                Example: "1.1.0-git The Luggage"
            </summary>
            <returns>a string containing the libvlc version</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_get_compiler">
            <summary>
                Retrieve libvlc compiler version.
                <para />
                Example: "gcc version 4.2.3 (Ubuntu 4.2.3-2ubuntu6)"
            </summary>
            <returns>a string containing the libvlc compiler version</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_get_changeset">
            <summary>
                Retrieve libvlc changeset.
                <para />
                Example: "aa9bce0bc4"
            </summary>
            <returns>a string containing the libvlc changeset</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_free">
            <summary>
                Frees an heap allocation returned by a LibVLC function.
                If you know you're using the same underlying C run-time as the LibVLC
                implementation, then you can call ANSI C free() directly instead.
            </summary>
            <param name="ptr">the pointer</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_module_description_list_release">
            <summary>
                Release a list of module descriptions.
            </summary>
            <param name="p_list">the list to be released</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_audio_filter_list_get">
            <summary>
                Returns a list of audio filters that are available.
            </summary>
            <param name="p_instance">libvlc instance</param>
            <returns>
                a list of module descriptions. It should be freed with <see cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_list_release" />.
                In case of an error, NULL is returned.
            </returns>
            <seealso cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_t" />
            <seealso cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_list_release" />
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_video_filter_list_get">
            <summary>
                Returns a list of video filters that are available.
            </summary>
            <param name="p_instance">libvlc instance</param>
            <returns>
                a list of module descriptions. It should be freed with libvlc_module_description_list_release().
                In case of an error, NULL is returned.
            </returns>
            <seealso cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_t" />
            <seealso cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_list_release" />
        </member>
        <member name="T:Meta.Vlc.Interop.Core.Time.libvlc_clock">
            <summary>
                Return the current time as defined by LibVLC. The unit is the microsecond.
                Time increases monotonically (regardless of time zone changes and RTC
                adjustements).
                <para />
                The origin is arbitrary but consistent across the whole system
                (e.g. the system uptim, the time since the system was booted).
            </summary>
            <remarks>On systems that support it, the POSIX monotonic clock is used.</remarks>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Core.libvlc_module_description_t">
            <summary>
                Description of a module.
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.ReleaseVlmInstance">
            <summary>
                释放给定的 LibVlc 的实例相关的 VLM 实例
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:Meta.Vlc.Interop.NewBroadCastInput">
            <summary>
                添加广播和一个输入
            </summary>
            <param name="instance">VLM 实例指针</param>
            <param name="broadcastName">广播名</param>
            <param name="inputMRL">输入媒体资源地址</param>
            <param name="outputMRl">输出媒体资源地址</param>
            <param name="options"></param>
            <param name="IntPtrOptions"></param>
            <param name="boolNewBorodcast">设置一个值允许打开新的新的广播</param>
            <param name="ifLoopBroadcast">是否广播循环播放</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.NewVodInput">
            <summary>
                添加视频点播和一个输入
            </summary>
            <param name="instance">VLM 实例指针</param>
            <param name="mediaWork"></param>
            <param name="MRLinput"></param>
            <param name="numberOptions"></param>
            <param name="addOptions"></param>
            <param name="boolNewVod"></param>
            <param name="vodMuxer"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.DelBoroadcastOrOvd">
            <summary>
                删除媒体(视频点播或广播)
            </summary>
            <param name="instance">VLM 实例指针</param>
            <param name="delBroadcastName"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaSwitch">
            <summary>
                启用或禁用媒体(视频点播或广播)
            </summary>
            <param name="instance"></param>
            <param name="mediaWork"></param>
            <param name="boolNewBorodcast"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.SetMediaOutput">
            <summary>
                设置媒体输出
            </summary>
            <param name="instance">VLM 实例指针</param>
            <param name="broadcastWork"></param>
            <param name="outputMRl"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.SetMediaInput">
            <summary>
                设置媒体的 MRL 输入
            </summary>
            <param name="instance"></param>
            <param name="mediaWork"></param>
            <param name="inputMRl"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.AddMediaInput">
            <summary>
                增加一个媒体的 MRL 输入
            </summary>
            <param name="instance"></param>
            <param name="mediaWork"></param>
            <param name="inputMRl"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.SetMediaLoop">
            <summary>
                设置媒体循环状态
            </summary>
            <param name="instance"></param>
            <param name="mediaWork"></param>
            <param name="newStatus">媒体新的状态</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.SetVodMuxer">
            <summary>
                设置媒体的 Vod Muxer
            </summary>
            <param name="instance"></param>
            <param name="mediaWork"></param>
            <param name="newMuxer"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.EditMediaParas">
            <summary>
                编辑媒体参数
            </summary>
            <param name="instance"></param>
            <param name="newBroadcastName"></param>
            <param name="inPutMRL"></param>
            <param name="outPutMRL"></param>
            <param name="numberOptains"></param>
            <param name="addOptains"></param>
            <param name="boolNewBroadcast"></param>
            <param name="ifLoopBroadcast"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.PlayNamedBroadcast">
            <summary>
                播放指定媒体
            </summary>
            <param name="instance"></param>
            <param name="mediaName">指定的媒体的名字</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.StopNamedBroadcast">
            <summary>
                停止指定的媒体
            </summary>
            <param name="instance"></param>
            <param name="mediaName">指定的媒体的名字</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.PauseNamedBroadcast">
            <summary>
                暂停指定的媒体
            </summary>
            <param name="instance"></param>
            <param name="mediaName">指定的媒体的名字</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.SeekInNamedBroadcast">
            <summary>
                在指定的广播中寻找
            </summary>
            <param name="instance"></param>
            <param name="mediaName">指定的媒体的名字</param>
            <param name="seekPercent">寻找进度的百分比数值</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.ReturnJsonMessage">
            <summary>
                以 Json 字符串的形式返回一个关于媒体的信息
            </summary>
            <param name="instance"></param>
            <param name="namedMediaName"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.GetMediaPosition">
            <summary>
                通过名称或 ID 获取媒体实例的位置
            </summary>
            <param name="instance"></param>
            <param name="MediaName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.GetMediaTime">
            <summary>
                通过名称或 ID 获取媒体实例的时间
            </summary>
            <param name="instance"></param>
            <param name="mediaName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.GetMediaLength">
            <summary>
                通过名称或 ID 获取媒体实例的长度
            </summary>
            <param name="instance"></param>
            <param name="mediaName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.GetMediaBackRate">
            <summary>
                通过名称或 ID 获取媒体实例的退率
            </summary>
            <param name="instance"></param>
            <param name="mediaName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.GetMediaEventManager">
            <summary>
                从 Vim Media 中得到 Libvlc 事件管理器
            </summary>
            <param name="libvlcInstance"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.LibVlcFunction`1">
            <summary>
                A dynamic mapper of LibVlc functions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcFunction`1.#ctor(System.IntPtr,Meta.Vlc.Interop.LibVlcVersion)">
            <summary>
                Load a LibVlc function from unmanaged to managed.
            </summary>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
            <exception cref="T:Meta.Vlc.NoLibVlcFunctionAttributeException">
                For LibVlcFunction, need LibVlcFunctionAttribute to get Infomation
                of function.
            </exception>
            <exception cref="T:Meta.Vlc.FunctionNotFoundException">Can't find function in dll.</exception>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunction`1.IsEnable">
            <summary>
                Get this <see cref="T:Meta.Vlc.Interop.LibVlcFunction`1" /> is available or not.
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunction`1.FunctionInfomation">
            <summary>
                Get infomation of this <see cref="T:Meta.Vlc.Interop.LibVlcFunction`1" />.
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunction`1.Delegate">
            <summary>
                Get delegate of this <see cref="T:Meta.Vlc.Interop.LibVlcFunction`1" />, if <see cref="P:Meta.Vlc.Interop.LibVlcFunction`1.IsEnable" /> is false, this method will throw
                exception.
            </summary>
            <exception cref="T:Meta.Vlc.FunctionNotAvailableException" accessor="get">This function isn't available on current version LibVlc.</exception>
        </member>
        <member name="T:Meta.Vlc.Interop.LibVlcFunctionAttribute">
            <summary>
                为 LibVlc 函数委托初始化提供必要的信息
            </summary>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcFunctionAttribute.#ctor(System.String)">
            <summary>
                指定该委托在 LibVlc 中的函数名,不限定 LibVlc 的版本
            </summary>
            <param name="functionName">函数名</param>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcFunctionAttribute.#ctor(System.String,System.String)">
            <summary>
                指定该委托在 LibVlc 中的函数名,并要求不低于指定版本的 LibVlc
            </summary>
            <param name="functionName">函数名</param>
            <param name="minVersion">最低支持的 LibVlc</param>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcFunctionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
                指定该委托在 LibVlc 中的函数名,并要求不低于指定版本的 LibVlc,也不高于指定的最大版本
            </summary>
            <param name="functionName">函数名</param>
            <param name="minVersion">最低支持的 LibVlc</param>
            <param name="maxVersion">最高支持的 LibVlc</param>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcFunctionAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                指定该委托在 LibVlc 中的函数名,并要求不低于指定版本的 LibVlc,也不高于指定的最大版本
            </summary>
            <param name="functionName">函数名</param>
            <param name="minVersion">最低支持的 LibVlc</param>
            <param name="maxVersion">最高支持的 LibVlc</param>
            <param name="dev">特定支持的 LibVlc 开发版本</param>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunctionAttribute.FunctionName">
            <summary>
                获取一个值,表示函数在 LibVlc 中的名称
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunctionAttribute.MinVersion">
            <summary>
                获取一个值,表示支持该函数的最小 LibVlc 版本
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunctionAttribute.MaxVersion">
            <summary>
                获取一个值,表示支持该函数的最大 LibVlc 版本
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcFunctionAttribute.Dev">
            <summary>
                获取一个值,表示特定的开发版本
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.LibVlcVersion">
            <summary>
                Version infomation of LibVlc.
            </summary>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcVersion.#ctor(System.String)">
            <summary>
                Create LibVlcVersion from version string, it must like "2.2.0-Meta Weatherwax".
            </summary>
            <param name="versionString">version string</param>
            <exception cref="T:Meta.Vlc.VersionStringParseException">Can't parse libvlc version string, it must like "2.2.0-Meta Weatherwax".</exception>
            <exception cref="T:System.OverflowException">
                At least one component of version represents a number greater than
                <see cref="F:System.Int32.MaxValue" />.
            </exception>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcVersion.Version">
            <summary>
                Version of LibVlc.
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcVersion.DevString">
            <summary>
                DevString of LibVlc.
            </summary>
        </member>
        <member name="P:Meta.Vlc.Interop.LibVlcVersion.CodeName">
            <summary>
                Code name of LibVlc.
            </summary>
        </member>
        <member name="M:Meta.Vlc.Interop.LibVlcVersion.IsFunctionAvailable(Meta.Vlc.Interop.LibVlcFunctionAttribute)">
            <summary>
                Check a function is available for this version.
            </summary>
            <param name="functionInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_lock_cb">
            <summary>
                Callback prototype to allocate and lock a picture buffer.
                <para />
                Whenever a new video frame needs to be decoded, the lock callback is
                invoked. Depending on the video chroma, one or three pixel planes of
                adequate dimensions must be returned via the second parameter. Those
                planes must be aligned on 32-bytes boundaries.
            </summary>
            <param name="opaque">private pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" /> [IN]</param>
            <param name="planes">
                start address of the pixel planes (LibVLC allocates the array of void pointers, this callback must
                initialize the array) [OUT]
            </param>
            <returns>a private pointer for the display and unlock callbacks to identify the picture buffers</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_unlock_cb">
            <summary>
                Callback prototype to unlock a picture buffer.
                <para />
                When the video frame decoding is complete, the unlock callback is invoked.
                This callback might not be needed at all. It is only an indication that the
                application can now read the pixel values if it needs to.
            </summary>
            <param name="opaque">A picture buffer is unlocked after the picture is decoded, but before the picture is displayed.</param>
            <param name="picture">private pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" /> [IN]</param>
            <param name="planes">
                private pointer returned from the <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_lock_cb" /> callback (this parameter is
                only for convenience) [IN]
            </param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_display_cb">
            <summary>
                Callback prototype to display a picture.
                <para />
                When the video frame needs to be shown, as determined by the media playback
                clock, the display callback is invoked.
            </summary>
            <param name="opaque">private pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" /> [IN]</param>
            <param name="picture">private pointer returned from the <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_lock_cb" /> callback [IN]</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_format_cb">
            <summary>
                Callback prototype to configure picture buffers format.
                This callback gets the format of the video as output by the video decoder
                and the chain of video filters (if any). It can opt to change any parameter
                as it needs. In that case, LibVLC will attempt to convert the video format
                (rescaling and chroma conversion) but these operations can be CPU intensive.
            </summary>
            <param name="opaque">pointer to the private pointer passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" /> [IN/OUT]</param>
            <param name="chroma">pointer to the 4 bytes video format identifier [IN/OUT]</param>
            <param name="width">pointer to the pixel width [IN/OUT]</param>
            <param name="height">pointer to the pixel height [IN/OUT]</param>
            <param name="pitches">table of scanline pitches in bytes for each pixel plane (the table is allocated by LibVLC) [OUT]</param>
            <param name="lines">table of scanlines count for each plane [OUT]</param>
            <returns>the number of picture buffers allocated, 0 indicates failure</returns>
            <remarks>
                For each pixels plane, the scanline pitch must be bigger than or equal to
                the number of bytes per pixel multiplied by the pixel width.
                Similarly, the number of scanlines must be bigger than of equal to
                the pixel height.
                <para />
                Furthermore, we recommend that pitches and lines be multiple of 32
                to not break assumptions that might be held by optimized code
                in the video decoders, video filters and/or video converters.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_cleanup_cb">
            <summary>
                Callback prototype to configure picture buffers format.
            </summary>
            <param name="opaque">
                opaque private pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" /> (and possibly
                modified by <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_format_cb" />) [IN]
            </param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_play_cb">
            <summary>
                Callback prototype for audio playback.
                <para />
                The LibVLC media player decodes and post-processes the audio signal
                asynchronously (in an internal thread). Whenever audio samples are ready
                to be queued to the output, this callback is invoked.
                <para />
                The number of samples provided per invocation may depend on the file format,
                the audio coding algorithm, the decoder plug-in, the post-processing
                filters and timing. Application must not assume a certain number of samples.
                <para />
                The exact format of audio samples is determined by <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format" />
                or <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format_callbacks" /> as is the channels layout.
                <para />
                Note that the number of samples is per channel. For instance, if the audio
                track sampling rate is 48000 Hz, then 1200 samples represent 25 milliseconds
                of audio signal - regardless of the number of audio channels.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
            <param name="samples">pointer to a table of audio samples to play back [IN]</param>
            <param name="count">number of audio samples to play back</param>
            <param name="pts">expected play time stamp (see libvlc_delay())</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_pause_cb">
            <summary>
                Callback prototype for audio pause.
                <para />
                LibVLC invokes this callback to pause audio playback.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
            <param name="pts">time stamp of the pause request (should be elapsed already)</param>
            <remarks>The pause callback is never called if the audio is already paused.</remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_resume_cb">
            <summary>
                Callback prototype for audio resumption.
                <para />
                LibVLC invokes this callback to resume audio playback after it was
                previously paused.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
            <param name="pts">time stamp of the resumption request (should be elapsed already)</param>
            <remarks>The resume callback is never called if the audio is not paused.</remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_flush_cb">
            <summary>
                Callback prototype for audio buffer flush.
                <para />
                LibVLC invokes this callback if it needs to discard all pending buffers and
                stop playback as soon as possible. This typically occurs when the media is
                stopped.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
            <param name="pts"></param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_drain_cb">
            <summary>
                Callback prototype for audio buffer drain.
                <para />
                LibVLC may invoke this callback when the decoded audio track is ending.
                There will be no further decoded samples for the track, but playback should
                nevertheless continue until all already pending buffers are rendered.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_volume_cb">
            <summary>
                Callback prototype for audio volume change.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
            <param name="volume">software volume (1. = nominal, 0. = mute)</param>
            <param name="mute">muted flag</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_setup_cb">
            <summary>
                Callback prototype to setup the audio playback.
                <para />
                This is called when the media player needs to create a new audio output.
            </summary>
            <param name="data">pointer to the data pointer passed to libvlc_audio_set_callbacks() [IN/OUT]</param>
            <param name="format">4 bytes sample format [IN/OUT]</param>
            <param name="rate">sample rate [IN/OUT]</param>
            <param name="channels">channels count [IN/OUT]</param>
            <returns>0 on success, anything else to skip audio playback</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_cleanup_cb">
            <summary>
                Callback prototype for audio playback cleanup.
                <para />
                This is called when the media player no longer needs an audio output.
            </summary>
            <param name="data">data pointer as passed to <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" /> [IN]</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_title_t">
            <summary>
                Description for titles
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_marquee_option_t">
            <summary>
                Marq options definition
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_video_marquee_option_t.libvlc_marquee_Text">
            <summary>
                string argument
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_navigate_mode_t">
            <summary>
                Navigation mode
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_position_t">
            <summary>
                Enumeration of values used to set position (e.g. of video title).
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_teletext_key_t">
            <summary>
                Enumeration of teletext keys than can be passed via <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_teletext" />
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_logo_option_t">
            <summary>
                option values for libvlc_video_{get,set}_logo_{int,string}
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_logo_option_t.libvlc_logo_file">
            <summary>
                string argument, "file,d,t;file,d,t;..."
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_adjust_option_t">
            <summary>
                option values for libvlc_video_{get,set}_adjust_{int,float,bool}
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_toggle_fullscreen">
            <summary>
                Toggle fullscreen status on non-embedded video outputs.
            </summary>
            <param name="p_mi">the media player</param>
            <remarks>
                The same limitations applies to this function
                as to libvlc_set_fullscreen().
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_set_fullscreen">
            <summary>
                Enable or disable fullscreen.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="b_fullscreen">boolean for fullscreen status</param>
            <remarks>
                With most window managers, only a top-level windows can be in
                full-screen mode. Hence, this function will not operate properly if
                libvlc_media_player_set_xwindow was used to embed the video in a
                non-top-level window. In that case, the embedding window must be reparented
                to the root window <b>before</b> fullscreen mode is enabled. You will want
                to reparent it back to its normal parent when disabling fullscreen.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_get_fullscreen">
            <summary>
                Get current fullscreen status.
            </summary>
            <param name="p_mi">the media player</param>
            <returns>the fullscreen status (boolean)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_key_input">
            <summary>
                Enable or disable key press events handling, according to the LibVLC hotkeys
                configuration. By default and for historical reasons, keyboard events are
                handled by the LibVLC video widget.
                On X11, there can be only one subscriber for key press and mouse
                click events per window. If your application has subscribed to those events
                for the X window ID of the video widget, then LibVLC will not be able to
                handle key presses and mouse clicks in any case.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="on">true to handle key press events, false to ignore them.</param>
            <remarks>
                This function is only implemented for X11 and Win32 at the moment.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_mouse_input">
            <summary>
                Enable or disable mouse click events handling. By default, those events are
                handled. This is needed for DVD menus to work, as well as a few video
                filters such as "puzzle".
            </summary>
            <param name="p_mi">the media player</param>
            <param name="on">true to handle mouse click events, false to ignore them.</param>
            <remarks>
                This function is only implemented for X11 and Win32 at the moment.
            </remarks>
            <seealso cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_key_input" />
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_size">
            <summary>
                Get the pixel dimensions of a video.
            </summary>
            <param name="p_mi">media player</param>
            <param name="num">number of the video (starting from, and most commonly 0)</param>
            <param name="px">pointer to get the pixel width [OUT]</param>
            <param name="py">pointer to get the pixel height [OUT]</param>
            <returns>0 on success, -1 if the specified video does not exist</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_cursor">
             Get the mouse pointer coordinates over a video.
             Coordinates are expressed in terms of the decoded video resolution,
             <b>not</b> in terms of pixels on the screen/viewport (to get the latter,
             you can query your windowing system directly).
            
             Either of the coordinates may be negative or larger than the corresponding
             dimension of the video, if the cursor is outside the rendering area.
            
             @warning The coordinates may be out-of-date if the pointer is not located
             on the video rendering area. LibVLC does not track the pointer if it is
             outside of the video widget.
            
             @note LibVLC does not support multiple pointers (it does of course support
             multiple input devices sharing the same pointer) at the moment.
            
             \param p_mi media player
             \param num number of the video (starting from, and most commonly 0)
             \param px pointer to get the abscissa [OUT]
             \param py pointer to get the ordinate [OUT]
             \return 0 on success, -1 if the specified video does not exist
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_scale">
             Get the current video scaling factor.
             See also libvlc_video_set_scale().
            
             \param p_mi the media player
             \return the currently configured zoom factor, or 0. if the video is set
             to fit to the output window/drawable automatically.
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_scale">
             Set the video scaling factor. That is the ratio of the number of pixels on
             screen to the number of pixels in the original decoded video in each
             dimension. Zero is a special value; it will adjust the video to the output
             window/drawable (in windowed mode) or the entire screen.
            
             Note that not all video outputs support scaling.
            
             \param p_mi the media player
             \param f_factor the scaling factor, or zero
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_aspect_ratio">
             Get current video aspect ratio.
            
             \param p_mi the media player
             \return the video aspect ratio or NULL if unspecified
             (the result must be released with free() or libvlc_free()).
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_aspect_ratio">
             Set new video aspect ratio.
            
             \param p_mi the media player
             \param psz_aspect new video aspect-ratio or NULL to reset to default
             \note Invalid aspect ratios are ignored.
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_new_viewpoint">
            <summary>
                Create a video viewpoint structure.
            </summary>
            <returns>video viewpoint or NULL (the result must be released with free() or libvlc_free()).</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_update_viewpoint">
            <summary>
                Update the video viewpoint information.
            </summary>
            <param name="p_mi">media player</param>
            <param name="p_viewpoint">video viewpoint allocated via <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_new_viewpoint" /></param>
            <param name="b_absolute">if true replace the old viewpoint with the new one. If false, increase/decrease it.</param>
            <returns>-1 in case of error, 0 otherwise</returns>
            <remarks>
                It is safe to call this function before the media player is started.
                <para />
                the values are set asynchronously, it will be used by the next frame displayed.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_spu">
            <summary>
                Get current video subtitle.
            </summary>
            <param name="p_mi">the media player</param>
            <returns>the video subtitle selected, or -1 if none</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_spu_count">
            <summary>
                Get the number of available video subtitles.
            </summary>
            <param name="p_mi">the media player</param>
            <returns>the number of available video subtitles</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_spu_description">
            <summary>
                Get the description of available video subtitles.
            </summary>
            <param name="p_mi">the media player</param>
            <returns>
                list containing description of available video subtitles. It must be freed with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_list_release" />
            </returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_spu">
            <summary>
                Set new video subtitle.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="i_spu">video subtitle track to select (i_id from track description)</param>
            <returns>0 on success, -1 if out of range</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_spu_delay">
            <summary>
                Get the current subtitle delay. Positive values means subtitles are being
                displayed later, negative values earlier.
            </summary>
            <param name="p_mi">media player</param>
            <returns>time (in microseconds) the display of subtitles is being delayed</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_spu_delay">
            <summary>
                Set the subtitle delay. This affects the timing of when the subtitle will
                be displayed. Positive values result in subtitles being displayed later,
                while negative values will result in subtitles being displayed earlier.
                <para />
                The subtitle delay will be reset to zero each time the media changes.
            </summary>
            <param name="p_mi">media player</param>
            <param name="i_delay">time (in microseconds) the display of subtitles should be delayed</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_media_player_get_full_title_descriptions">
            <summary>
                Get the full description of available titles
            </summary>
            <param name="p_mi">the media player</param>
            <param name="titles">
                address to store an allocated array of title descriptions
                descriptions (must be freed with <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_title_descriptions_release" />
                by the caller) [OUT]
            </param>
            <returns>the number of titles (-1 on error)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_title_descriptions_release">
            <summary>
                Release a title description
            </summary>
            <param name="p_titles">title description array to release</param>
            <param name="i_count">number of title descriptions to release</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_media_player_get_full_chapter_descriptions">
            <summary>
                Get the full description of available chapters
            </summary>
            <param name="p_mi">the media player</param>
            <param name="i_chapters_of_title">index of the title to query for chapters (uses current title if set to -1)</param>
            <param name="pp_chapters">
                address to store an allocated array of chapter descriptions
                descriptions (must be freed with <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_chapter_descriptions_release" />
                by the caller) [OUT]
            </param>
            <returns>the number of chapters (-1 on error)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_chapter_descriptions_release">
            <summary>
                Release a chapter description
            </summary>
            <param name="p_chapters">chapter description array to release</param>
            <param name="i_count">number of chapter descriptions to release</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_crop_geometry">
            <summary>
                Get current crop filter geometry.
            </summary>
            <param name="p_mi">the media player</param>
            <returns>the crop filter geometry or NULL if unset</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_crop_geometry">
            <summary>
                Set new crop filter geometry.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="psz_geometry">new crop filter geometry (NULL to unset)</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_teletext">
            <summary>
                Get current teletext page requested or 0 if it's disabled.
                <para />
                Teletext is disabled by default, call <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_teletext" /> to enable it.
            </summary>
            <param name="p_mi">the media player</param>
            <returns>the current teletext page requested.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_teletext">
            <summary>
                Set new teletext page to retrieve.
                <para />
                This function can also be used to send a teletext key.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="i_page">
                teletex page number requested. This value can be 0 to disable
                teletext, a number in the range ]0;1000[ to show the requested page, or a
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_teletext_key_t" />. 100 is the default teletext page.
            </param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_track_count">
            <summary>
                Get number of available video tracks.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the number of available video tracks (int)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_track_description">
            <summary>
                Get the description of available video tracks.
            </summary>
            <param name="p_mi">media player</param>
            <returns>
                list with description of available video tracks, or NULL on error. It must be freed with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_list_release" />
            </returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_track">
            <summary>
                Get current video track.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the video track ID (int) or -1 if no active input</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_track">
            <summary>
                Set video track.
            </summary>
            <param name="p_mi">media player</param>
            <param name="i_track">the track ID (i_id field from track description)</param>
            <returns>0 on success, -1 if out of range</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_take_snapshot">
            <summary>
                Take a snapshot of the current video window.
                If i_width AND i_height is 0, original size is used.
                If i_width XOR i_height is 0, original aspect-ratio is preserved.
            </summary>
            <param name="p_mi">media player instance</param>
            <param name="num">number of video output (typically 0 for the first/only one)</param>
            <param name="psz_filepath">the path of a file or a folder to save the screenshot into</param>
            <param name="i_width">the snapshot's width</param>
            <param name="i_height">the snapshot's height</param>
            <returns>0 on success, -1 if the video was not found</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_deinterlace">
            <summary>
                Enable or disable deinterlace filter
            </summary>
            <param name="p_mi">libvlc media player</param>
            <param name="deinterlace">state -1: auto (default), 0: disabled, 1: enabled</param>
            <param name="psz_mode">type of deinterlace filter, NULL for current/default filter</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_marquee_int">
            <summary>
                Get an integer marquee option value
            </summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">option marq option to get <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_marquee_option_t" /></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_marquee_string">
            <summary>
                Get a string marquee option value
            </summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">option marq option to get <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_marquee_option_t" /></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_marquee_int">
            <summary>
                Enable, disable or set an integer marquee option
                <para />
                Setting libvlc_marquee_Enable has the side effect of enabling (arg !0)
                or disabling (arg 0) the marq filter.
            </summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">option marq option to get <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_marquee_option_t" /></param>
            <param name="i_val">marq option value</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_marquee_string">
            <summary>
                Set a marquee string option
            </summary>
            <param name="p_mi">libvlc media player</param>
            <param name="option">option marq option to get <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_marquee_option_t" /></param>
            <param name="psz_text">marq option value</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_logo_int">
            <summary>
                Get integer logo option.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to get, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_logo_option_t" /></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_logo_int">
             Set logo option as integer. Options that take a different type value
             are ignored.
             Passing libvlc_logo_enable as option value has the side effect of
             starting (arg !0) or stopping (arg 0) the logo filter.
            
             \param p_mi libvlc media player instance
             \param option logo option to set, values of libvlc_video_logo_option_t
             \param value logo option value
            <summary>
                Set logo option as integer. Options that take a different type value
                are ignored.
                Passing libvlc_logo_enable as option value has the side effect of
                starting (arg !0) or stopping (arg 0) the logo filter.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to set, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_logo_option_t" /></param>
            <param name="value">logo option value</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_logo_string">
            <summary>
                Set logo option as string. Options that take a different type value
                are ignored.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to set, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_logo_option_t" /></param>
            <param name="psz_value">logo option value</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_adjust_int">
            <summary>
                Get integer adjust option.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adjust option to get, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_adjust_option_t" /></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_adjust_int">
            <summary>
                Set adjust option as integer. Options that take a different type value
                are ignored.
                Passing libvlc_adjust_enable as option value has the side effect of
                starting (arg !0) or stopping (arg 0) the adjust filter.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">logo option to set, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_logo_option_t" /></param>
            <param name="value">adjust option value</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_get_adjust_float">
            <summary>
                Get float adjust option.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adjust option to get, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_adjust_option_t" /></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_set_adjust_float">
            <summary>
                Set adjust option as float. Options that take a different type value are ignored.
            </summary>
            <param name="p_mi">libvlc media player instance</param>
            <param name="option">adust option to set, values of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Video.libvlc_video_adjust_option_t" /></param>
            <param name="value">adjust option value</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_types_t">
            <summary>
                Audio device types
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_channel_t">
            <summary>
                Audio channels
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t">
            <summary>
                Media player roles.
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_set_role" />
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_None">
            <summary>
                Don't use a media player role
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Music">
            <summary>
                Music (or radio) playback
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Video">
            <summary>
                Video playback
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Communication">
            <summary>
                Speech, real-time communication
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Game">
            <summary>
                Video game
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Notification">
            <summary>
                User interaction feedback
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Animation">
            <summary>
                Embedded animation (e.g. in web page)
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Production">
            <summary>
                Audio editting/production
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Accessibility">
            <summary>
                Accessibility
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t.libvlc_role_Test">
            <summary>
                Testing
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_list_get">
            <summary>
                Gets the list of available audio output modules.
            </summary>
            <param name="p_instance">libvlc instance</param>
            <returns>
                list of available audio outputs. It must be freed with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_list_release" /> <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_t" />.
                In case of error, NULL is returned.
            </returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_list_release">
            <summary>
                Frees the list of available audio output modules.
            </summary>
            <param name="p_list">list with audio outputs for release</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_set">
            <summary>
                Selects an audio output module.
            </summary>
            <param name="p_mi">media player</param>
            <param name="psz_name">name of audio output, use psz_name of <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_t" /></param>
            <returns>0 if function succeeded, -1 on error</returns>
            <remarks>
                Any change will take be effect only after playback is stopped and
                restarted. Audio output cannot be changed while playing.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_enum">
            <summary>
                Gets a list of potential audio output devices, <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_set" />
            </summary>
            <param name="mp">media player</param>
            <returns>
                A NULL-terminated linked list of potential audio output devices.
                It must be freed with <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_list_release" />
            </returns>
            <remarks>
                Not all audio outputs support enumerating devices.
                The audio output may be functional even if the list is empty (NULL).
                <para />
                The list may not be exhaustive.
                <para />
                warning: Some audio output devices in the list might not actually work in
                some circumstances. By default, it is recommended to not specify any
                explicit audio device.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_list_get">
            <summary>
                Gets a list of audio output devices for a given audio output module, <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_set" />.
            </summary>
            <param name="p_instance">libvlc instance</param>
            <param name="aout">audio output name (as returned by <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_list_get" />)</param>
            <returns>
                A NULL-terminated linked list of potential audio output devices. It must be freed with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_list_release" />
            </returns>
            <remarks>
                Not all audio outputs support this. In particular, an empty (NULL)
                list of devices does <b>not</b> imply that the specified audio output does
                not work.
                <para />
                The list may not be exhaustive.
                <para />
                warning: Some audio output devices in the list might not actually work in
                some circumstances. By default, it is recommended to not specify any
                explicit audio device.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_list_release">
            <summary>
                Frees a list of available audio output devices.
            </summary>
            <param name="p_list">list with audio outputs for release</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_set">
            <summary>
                Configures an explicit audio output device.
                <para />
                If the module paramater is NULL, audio output will be moved to the device
                specified by the device identifier string immediately. This is the
                recommended usage.
                <para />
                A list of adequate potential device strings can be obtained with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_enum" />.
                <para />
                However passing NULL is supported in LibVLC version 2.2.0 and later only;
                in earlier versions, this function would have no effects when the module
                parameter was NULL.
                <para />
                If the module parameter is not NULL, the device parameter of the
                corresponding audio output, if it exists, will be set to the specified
                string. Note that some audio output modules do not have such a parameter
                (notably MMDevice and PulseAudio).
                <para />
                A list of adequate potential device strings can be obtained with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_list_get" />.
            </summary>
            <param name="mp">media player</param>
            <param name="module">
                If NULL, current audio output module.
                if non-NULL, name of audio output module
                (<see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_t" />)
            </param>
            <param name="device_id">device identifier string</param>
            <remarks>
                note: This function does not select the specified audio output plugin.
                libvlc_audio_output_set() is used for that purpose.
                <para />
                warning: The syntax for the device parameter depends on the audio output.
                <para />
                Some audio output modules require further parameters (e.g. a channels map
                in the case of ALSA).
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_get">
            <summary>
                Get the current audio output device identifier.
                <para />
                This complements <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_set" />.
            </summary>
            <param name="mp"></param>
            <returns>
                the current audio output device identifier
                NULL if no device is selected or in case of error
                (the result must be released with free() or <see cref="T:Meta.Vlc.Interop.Core.libvlc_free" />).
            </returns>
            <remarks>
                warning: The initial value for the current audio output device identifier
                may not be set or may be some unknown value. A LibVLC application should
                compare this value against the known device identifiers (e.g. those that
                were previously retrieved by a call to <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_enum" /> or
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_device_list_get" />) to find the current audio output device.
                <para />
                It is possible that the selected audio output device changes (an external
                change) without a call to libvlc_audio_output_device_set. That may make this
                method unsuitable to use if a LibVLC application is attempting to track
                dynamic audio device changes as they happen.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_toggle_mute">
            <summary>
                Toggle mute status.
            </summary>
            <param name="p_mi">media player</param>
            <remarks>
                warning: Toggling mute atomically is not always possible: On some platforms,
                other processes can mute the VLC audio playback stream asynchronously. Thus,
                there is a small race condition where toggling will not work.
                See also the limitations of <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_set_mute" />.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_mute">
            <summary>
                Get current mute status.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the mute status (boolean) if defined, -1 if undefined/unapplicable</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_set_mute">
            <summary>
                Set mute status.
            </summary>
            <param name="p_mi">media player</param>
            <param name="status">If status is true then mute, otherwise unmute</param>
            <remarks>
                warning: This function does not always work. If there are no active audio
                playback stream, the mute status might not be available. If digital
                pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also
                some audio output plugins do not support muting at all.
                note: To force silent playback, disable all audio tracks. This is more
                efficient and reliable than mute.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_volume">
            <summary>
                Get current software audio volume.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the software volume in percents (0 = mute, 100 = nominal / 0dB)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_set_volume">
            <summary>
                Set current software audio volume.
            </summary>
            <param name="p_mi">media player</param>
            <param name="i_volume">the volume in percents (0 = mute, 100 = 0dB)</param>
            <returns>0 if the volume was set, -1 if it was out of range</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_track_count">
            <summary>
                Get number of available audio tracks.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the number of available audio tracks (int), or -1 if unavailable</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_track_description">
            <summary>
                Get the description of available audio tracks.
            </summary>
            <param name="p_mi">media player</param>
            <returns>
                list with description of available audio tracks, or NULL. It must be freed with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_list_release" />
            </returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_track">
            <summary>
                Get current audio track.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the audio track ID or -1 if no active input.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_set_track">
            <summary>
                Set current audio track.
            </summary>
            <param name="p_mi">media player</param>
            <param name="i_track">the track ID (i_id field from track description)</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_channel">
            <summary>
                Get current audio channel.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the audio channel <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_channel_t" /></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_set_channel">
            <summary>
                Set current audio channel.
            </summary>
            <param name="p_mi">media player</param>
            <param name="channel">the audio channel, <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_output_channel_t" /></param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_get_delay">
            <summary>
                Get current audio delay.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the audio delay (microseconds)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_set_delay">
            <summary>
                Set current audio delay. The audio delay will be reset to zero each time the media changes.
            </summary>
            <param name="p_mi">media player</param>
            <param name="i_delay">the audio delay (microseconds)</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_get_preset_count">
            <summary>
                Get the number of equalizer presets.
            </summary>
            <returns>number of presets</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_get_preset_name">
            <summary>
                Get the name of a particular equalizer preset.
                <para />
                This name can be used, for example, to prepare a preset label or menu in a user
                interface.
            </summary>
            <param name="u_index">index of the preset, counting from zero</param>
            <returns>preset name, or NULL if there is no such preset</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_get_band_count">
            <summary>
                Get the number of distinct frequency bands for an equalizer.
            </summary>
            <returns>number of frequency bands</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_get_band_frequency">
            <summary>
                Get a particular equalizer band frequency.
                <para />
                This value can be used, for example, to create a label for an equalizer band control
                in a user interface.
            </summary>
            <param name="u_index">index of the band, counting from zero</param>
            <returns>equalizer band frequency (Hz), or -1 if there is no such band</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_new">
            <summary>
                Create a new default equalizer, with all frequency values zeroed.
                <para />
                The new equalizer can subsequently be applied to a media player by invoking
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_set_equalizer" />.
                <para />
                The returned handle should be freed via <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_release" /> when
                it is no longer needed.
            </summary>
            <returns>opaque equalizer handle, or NULL on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_new_from_preset">
            <summary>
                Create a new equalizer, with initial frequency values copied from an existing
                preset.
                <para />
                The new equalizer can subsequently be applied to a media player by invoking
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_set_equalizer" />.
                <para />
                The returned handle should be freed via libvlc_audio_equalizer_release() when
                it is no longer needed.
            </summary>
            <param name="u_index">index of the preset, counting from zero</param>
            <returns>opaque equalizer handle, or NULL on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_release">
            <summary>
                Release a previously created equalizer instance.
                <para />
                The equalizer was previously created by using <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_new" /> or
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_new_from_preset" />.
                <para />
                It is safe to invoke this method with a NULL p_equalizer parameter for no effect.
            </summary>
            <param name="p_equalizer"></param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_set_preamp">
            <summary>
                Set a new pre-amplification value for an equalizer.
                <para />
                The new equalizer settings are subsequently applied to a media player by invoking
                libvlc_media_player_set_equalizer().
                <para />
                The supplied amplification value will be clamped to the -20.0 to +20.0 range.
            </summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <param name="f_preamp">preamp value (-20.0 to 20.0 Hz)</param>
            <returns>zero on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_get_preamp">
            <summary>
                Get the current pre-amplification value from an equalizer.
            </summary>
            <param name="p_equalizer">p_equalizer valid equalizer handle, must not be NULL</param>
            <returns> preamp value (Hz)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_set_amp_at_index">
            <summary>
                Set a new amplification value for a particular equalizer frequency band.
                The new equalizer settings are subsequently applied to a media player by invoking
                libvlc_media_player_set_equalizer().
                The supplied amplification value will be clamped to the -20.0 to +20.0 range.
            </summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <param name="f_amp">amplification value (-20.0 to 20.0 Hz)</param>
            <param name="u_band">index, counting from zero, of the frequency band to set</param>
            <returns>zero on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_audio_equalizer_get_amp_at_index">
            <summary>
                Get the amplification value for a particular equalizer frequency band.
            </summary>
            <param name="p_equalizer">valid equalizer handle, must not be NULL</param>
            <param name="u_band">index, counting from zero, of the frequency band to get</param>
            <returns>amplification value (Hz); NaN if there is no such frequency band</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_set_equalizer">
            <summary>
                Apply new equalizer settings to a media player.
                The equalizer is first created by invoking libvlc_audio_equalizer_new() or
                libvlc_audio_equalizer_new_from_preset().
                It is possible to apply new equalizer settings to a media player whether the media
                player is currently playing media or not.
                Invoking this method will immediately apply the new equalizer settings to the audio
                output of the currently playing media if there is any.
                If there is no currently playing media, the new equalizer settings will be applied
                later if and when new media is played.
                Equalizer settings will automatically be applied to subsequently played media.
                To disable the equalizer for a media player invoke this method passing NULL for the
                p_equalizer parameter.
                The media player does not keep a reference to the supplied equalizer so it is safe
                for an application to release the equalizer reference any time after this method
                returns.
            </summary>
            <param name="p_mi">opaque media player handle</param>
            <param name="p_equalizer">opaque equalizer handle, or NULL to disable the equalizer for this media player</param>
            <returns>zero on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_get_role">
            <summary>
                Gets the media role.
            </summary>
            <param name="p_mi">media player</param>
            <returns>the media player role (<see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t" />)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_set_role">
            <summary>
                Sets the media role.
            </summary>
            <param name="p_mi">media player</param>
            <param name="role">the media player role (<see cref="T:Meta.Vlc.Interop.MediaPlayer.Audio.libvlc_media_player_role_t" />)</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_new">
            <summary>
                Create an empty Media Player object
            </summary>
            <param name="p_libvlc_instance">
                the libvlc instance in which the Media Player should be created.
            </param>
            <returns>a new media player object, or NULL on error.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_new_from_media">
            <summary>
                Create a Media Player object from a Media
            </summary>
            <param name="p_md">the media. Afterwards the p_md can be safely destroyed.</param>
            <returns>a new media player object, or NULL on error.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_release">
            <summary>
                Release a media_player after use
                Decrement the reference count of a media player object. If the
                reference count is 0, then <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_release" /> will
                release the media player object. If the media player object
                has been released, then it should not be used again.
            </summary>
            <param name="p_mi">the Media Player to free</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_retain">
            <summary>
                Retain a reference to a media player object. Use <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_release" /> to decrement reference
                count.
            </summary>
            <param name="p_mi">media player object</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_media">
            <summary>
                Set the media that will be used by the media_player. If any, previous md will be released.
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="p_md">the Media. Afterwards the p_md can be safely destroyed.</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_media">
            <summary>
                Get the media used by the media_player.
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>the media associated with p_mi, or NULL if no media is associated</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_event_manager">
            <summary>
                Get the Event Manager from which the media player send event.
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>the event manager associated with p_mi</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_is_playing">
            <summary>
                is playing
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>1 if the media player is playing, 0 otherwise</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_play">
            <summary>
                Play
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>0 if playback started (and was already started), or -1 on error.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_pause">
            <summary>
                Pause or resume (no effect if there is no media)
            </summary>
            <param name="mp">the Media Player</param>
            <param name="do_pause">play/resume if zero, pause if non-zero</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_pause">
            <summary>
                Toggle pause (no effect if there is no media)
            </summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_stop">
            <summary>
                Stop (no effect if there is no media)
            </summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_renderer">
            <summary>
                Set a renderer to the media player
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="p_item">an item discovered by libvlc_renderer_discoverer_start</param>
            <returns>0 on success, -1 on error.</returns>
            seealso libvlc_renderer_discoverer_new
            <remarks>
                must be called before the first call of <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_play" /> to take effect.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks">
            <summary>
                Set callbacks and private data to render decoded video to a custom area
                in memory.
                Use <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_format" /> or <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_format_callbacks" />
                to configure the decoded format.
                <para />
                warning: Rendering video into custom memory buffers is considerably less
                efficient than rendering in a custom window as normal.
                <para />
                For optimal perfomances, VLC media player renders into a custom window, and
                does not use this function and associated callbacks. It is
                <b>
                    highly
                    recommended
                </b>
                that other LibVLC-based application do likewise.
                To embed video in a window, use libvlc_media_player_set_xid() or equivalent
                depending on the operating system.
                <para />
                If window embedding does not fit the application use case, then a custom
                LibVLC video output display plugin is required to maintain optimal video
                rendering performances.
                <para />
                The following limitations affect performance:
                <para />
                - Hardware video decoding acceleration will either be disabled completely,
                or require (relatively slow) copy from video/DSP memory to main memory.
                <para />
                - Sub-pictures (subtitles, on-screen display, etc.) must be blent into the
                main picture by the CPU instead of the GPU.
                <para />
                - Depending on the video format, pixel format conversion, picture scaling,
                cropping and/or picture re-orientation, must be performed by the CPU
                instead of the GPU.
                <para />
                - Memory copying is required between LibVLC reference picture buffers and
                application buffers (between lock and unlock callbacks).
                <para />
            </summary>
            <param name="mp">the media player</param>
            <param name="lock_cb">callback to lock video memory (must not be NULL)</param>
            <param name="unlock_cb">callback to unlock video memory (or NULL if not needed)</param>
            <param name="display_cb">callback to display video (or NULL if not needed)</param>
            <param name="opaque">private pointer for the three callbacks (as first parameter)</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_format">
            <summary>
                Set decoded video chroma and dimensions.
                This only works in combination with <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" />,
                and is mutually exclusive with <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_format_callbacks" />.
            </summary>
            <param name="mp">the media player</param>
            <param name="chroma">a four-characters string identifying the chroma (e.g. "RV32" or "YUYV")</param>
            <param name="width">pixel width</param>
            <param name="height">pixel height</param>
            <param name="pitch">line pitch (in bytes)</param>
            <remarks>
                All pixel planes are expected to have the same pitch.
                <para />
                To use the YCbCr color space with chrominance subsampling, consider using
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_format_callbacks" /> instead.
                consider using libvlc_video_set_format_callbacks() instead.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_format_callbacks">
            <summary>
                Set decoded video chroma and dimensions. This only works in combination with
                <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_video_set_callbacks" />.
            </summary>
            <param name="mp">the media player</param>
            <param name="setup">callback to select the video format (cannot be NULL)</param>
            <param name="cleanup">callback to release any allocated resources (or NULL)</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_hwnd">
            <summary>
                Set a Win32/Win64 API window handle (HWND) where the media player should
                render its video output. If LibVLC was built without Win32/Win64 API output
                support, then this has no effects.
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="drawable">windows handle of the drawable</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_hwnd">
            <summary>
                Get the Windows API window handle (HWND) previously set with
                libvlc_media_player_set_hwnd(). The handle will be returned even if LibVLC
                is not currently outputting any video to it.
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>a window handle or NULL if there are none.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks">
             Sets callbacks and private data for decoded audio.
            
             Use libvlc_audio_set_format() or libvlc_audio_set_format_callbacks()
             to configure the decoded audio format.
            
             \note The audio callbacks override any other audio output mechanism.
             If the callbacks are set, LibVLC will <b>not</b> output audio in any way.
            
             \param mp the media player
             \param play callback to play audio samples (must not be NULL)
             \param pause callback to pause playback (or NULL to ignore)
             \param resume callback to resume playback (or NULL to ignore)
             \param flush callback to flush audio buffers (or NULL to ignore)
             \param drain callback to drain audio buffers (or NULL to ignore)
             \param opaque private pointer for the audio callbacks (as first parameter)
             \version LibVLC 2.0.0 or later
            <summary>
                Sets callbacks and private data for decoded audio.
                <para />
                Use <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format" /> or <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format_callbacks" />
                to configure the decoded audio format.
            </summary>
            <param name="mp">the media player</param>
            <param name="play">callback to play audio samples (must not be NULL)</param>
            <param name="pause">callback to pause playback (or NULL to ignore)</param>
            <param name="resume">callback to resume playback (or NULL to ignore)</param>
            <param name="flush">callback to flush audio buffers (or NULL to ignore)</param>
            <param name="drain">callback to drain audio buffers (or NULL to ignore)</param>
            <param name="opaque">private pointer for the audio callbacks (as first parameter)</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_volume_callback">
            <summary>
                Set callbacks and private data for decoded audio. This only works in
                combination with <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" />.
                <para />
                Use <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format" /> or <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format_callbacks" />
                to configure the decoded audio format.
            </summary>
            <param name="mp">the media player</param>
            <param name="set_volume">callback to apply audio volume, or NULL to apply volume in software</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format_callbacks">
            <summary>
                Sets decoded audio format via callbacks.
                <para />
                This only works in combination with <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" />.
            </summary>
            <param name="mp">the media player</param>
            <param name="setup">callback to select the audio format (cannot be NULL)</param>
            <param name="cleanup">callback to release any allocated resources (or NULL)</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format">
            <summary>
                Sets a fixed decoded audio format.
                <para />
                This only works in combination with <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_callbacks" />,
                and is mutually exclusive with <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_set_format_callbacks" />.
            </summary>
            <param name="mp">the media player</param>
            <param name="format">a four-characters string identifying the sample format (e.g. "S16N" or "FL32")</param>
            <param name="rate">sample rate (expressed in Hz)</param>
            <param name="channels">channels count</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_length">
            <summary>
                Get the current movie length (in ms).
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>the movie length (in ms), or -1 if there is no media.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_time">
            <summary>
                Get the current movie time (in ms).
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>the movie time (in ms), or -1 if there is no media.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_time">
            <summary>
                Set the movie time (in ms). This has no effect if no media is being played.
                Not all formats and protocols support this.
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_time">the movie time (in ms).</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_position">
            <summary>
                Get movie position as percentage between 0.0 and 1.0.
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>movie position, or -1. in case of error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_position">
            <summary>
                Set movie position as percentage between 0.0 and 1.0.
                This has no effect if playback is not enabled.
                This might not work depending on the underlying input format and protocol.
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="f_pos">the position</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_chapter">
            <summary>
                Set movie chapter (if applicable).
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_chapter">chapter number to play</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_chapter">
            <summary>
                Get movie chapter.
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>chapter number currently playing, or -1 if there is no media.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_chapter_count">
            <summary>
                Get movie chapter count
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>number of chapters in movie, or -1.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_will_play">
            <summary>
                Is the player able to play
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_chapter_count_for_title">
            <summary>
                Get title chapter count
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_title">title</param>
            <returns>number of chapters in title, or -1</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_title">
            <summary>
                Set movie title
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="i_title">title number to play</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_title">
            <summary>
                Get movie title
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>title number currently playing, or -1</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_title_count">
            <summary>
                Get movie title count
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>title number count, or -1</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_previous_chapter">
            <summary>
                Set previous chapter (if applicable)
            </summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_next_chapter">
            <summary>
                Set next chapter (if applicable)
            </summary>
            <param name="p_mi">the Media Player</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_rate">
            <summary>
                Get the requested movie play rate.
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>movie play rate</returns>
            <remarks>
                Depending on the underlying media, the requested rate may be
                different from the real playback rate.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_rate">
            <summary>
                Set movie play rate
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="rate">movie play rate to set</param>
            <returns>
                -1 if an error was detected, 0 otherwise (but even then, it might
                not actually work depending on the underlying media protocol)
            </returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_get_state">
            <summary>
                Get current movie state
            </summary>
            <param name="p_mi">the Media Player</param>
            <returns>the current state of the media player (playing, paused, ...)</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_state_t" />
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_has_vout">
            <summary>
                How many video outputs does this media player have?
            </summary>
            <param name="p_mi">the media player</param>
            <returns>the number of video outputs</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_is_seekable">
            <summary>
                Is this media player seekable?
            </summary>
            <param name="p_mi">the media player</param>
            <returns>true if the media player can seek</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_can_pause">
            <summary>
                Can this media player be paused?
            </summary>
            <param name="p_mi">the media player</param>
            <returns>true if the media player can pause</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_program_scrambled">
            <summary>
                Check if the current program is scrambled
            </summary>
            <param name="p_mi">the media player</param>
            <returns>true if the current program is scrambled</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_next_frame">
            <summary>
                Display the next frame (if supported)
            </summary>
            <param name="p_mi">the media player</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_navigate">
            <summary>
                Navigate through DVD Menu
            </summary>
            <param name="p_mi">the Media Player</param>
            <param name="navigate">the Navigation mode</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_set_video_title_display">
            <summary>
                Set if, and how, the video title will be shown when media is played.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="position">
                position at which to display the title, or
                <see cref="F:Meta.Vlc.Interop.MediaPlayer.libvlc_position_t.libvlc_position_disable" /> to prevent the title from being displayed
            </param>
            <param name="timeout">
                title display timeout in milliseconds (ignored if
                <see cref="F:Meta.Vlc.Interop.MediaPlayer.libvlc_position_t.libvlc_position_disable" />)
            </param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_media_player_add_slave">
            <summary>
                Add a slave to the current media player.
            </summary>
            <param name="p_mi">the media player</param>
            <param name="i_type">subtitle or audio</param>
            <param name="psz_uri">Uri of the slave (should contain a valid scheme).</param>
            <param name="b_select">True if this slave should be selected when it's loaded</param>
            <returns>0 on success, -1 on error.</returns>
            <remarks>
                If the player is playing, the slave will be added directly. This call
                will also update the slave list of the attached libvlc_media_t.
            </remarks>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_add" />
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_list_release">
            <summary>
                Release (free) libvlc_track_description_t
            </summary>
            <param name="p_track_description">the structure to release</param>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_t">
            <summary>
                Description for video, audio tracks and subtitles. It contains
                id, name (description string) and pointer to next record.
            </summary>
            [StructLayout(LayoutKind.Sequential)]
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_title_description_t.i_duration">
            <summary>
                duration in milliseconds
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_title_description_t.psz_name">
            <summary>
                title name
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_title_description_t.i_flags">
            <summary>
                info if item was recognized as a menu, interactive or plain content by the demuxer
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_chapter_description_t">
            Description for chapters
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_chapter_description_t.i_time_offset">
            <summary>
                time-offset of the chapter in milliseconds
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_chapter_description_t.i_duration">
            <summary>
                duration of the chapter in milliseconds
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_chapter_description_t.psz_name">
            <summary>
                chapter name
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_t">
            <summary>
                Description for audio output. It contains
                name, description and pointer to next record.
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_device_t">
            <summary>
                Description for audio output device.
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_device_t.p_next">
            <summary>
                Next entry in list
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_device_t.psz_device">
            <summary>
                Device identifier string
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.MediaPlayer.libvlc_audio_output_device_t.psz_description">
            <summary>
                User-friendly device description
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_close_cb">
            <summary>
                Callback prototype to close a custom bitstream input media.
            </summary>
            <param name="opaque">private pointer as set by the <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_open_cb" /> callback</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_seek_cb">
            <summary>
                Callback prototype to seek a custom bitstream input media.
            </summary>
            <param name="opaque">private pointer as set by the <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_open_cb" /> callback</param>
            <param name="offset">absolute byte offset to seek to</param>
            <returns>0 on success, -1 on error.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_read_cb">
            <summary>
                Callback prototype to read data from a custom bitstream input media.
            </summary>
            <param name="opaque">private pointer as set by the <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_open_cb" /> callback</param>
            <param name="buf">start address of the buffer to read data into</param>
            <param name="len">bytes length of the buffer</param>
            <remarks>
                If no data is immediately available, then the callback should sleep.
                <para />
                The application is responsible for avoiding deadlock situations.
                In particular, the callback should return an error if playback is stopped;
                if it does not return, then <see cref="!:libvlc_media_player_stop" />() will never return.
            </remarks>
            <returns>strictly positive number of bytes read, 0 on end-of-stream, or -1 on non-recoverable error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_open_cb">
            <summary>
                Callback prototype to open a custom bitstream input media.
                <para />
                The same media item can be opened multiple times. Each time, this callback
                is invoked. It should allocate and initialize any instance-specific
                resources, then store them in *datap. The instance resources can be freed
                in the <see cref="!:Media.libvlc_media_close_cb(void*)" /> callback.
            </summary>
            <param name="opaque">private pointer as passed to <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_new_callbacks" />()</param>
            <param name="datap">storage space for a private data pointer [OUT]</param>
            <param name="sizep">byte length of the bitstream or UINT64_MAX if unknown [OUT]</param>
            <remarks>For convenience, *datap is initially NULL and *sizep is initially 0.</remarks>
            <returns>
                0 on success, non-zero on error. In case of failure, the other
                callbacks will not be invoked and any value stored in *datap and *sizep is
                discarded.
            </returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_slave_type_t">
            <summary>
                Type of a media slave: subtitle or audio.
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_projection_t.libvlc_video_projection_equirectangular">
            <summary>
                360 spherical
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_top_left">
            <summary>
                Normal. Top line represents top, left column left.
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_top_right">
            <summary>
                Flipped horizontally
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_bottom_left">
            <summary>
                Flipped vertically
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_bottom_right">
            <summary>
                Rotated 180 degrees
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_left_top">
            <summary>
                Transposed
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_left_bottom">
            <summary>
                Rotated 90 degrees clockwise (or 270 anti-clockwise)
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_right_top">
            <summary>
                Rotated 90 degrees anti-clockwise
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_orient_t.libvlc_video_orient_right_bottom">
            <summary>
                Anti-transposed
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_2d">
            <summary>
                No stereoscopy: 2D picture.
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_stereo_sbs">
            <summary>
                Side-by-side
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_stereo_tb">
            <summary>
                Top-bottom
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_stereo_row">
            <summary>
                Row sequential
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_stereo_col">
            <summary>
                Column sequential
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_stereo_frame">
            <summary>
                Frame sequential
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_multiview_t.libvlc_video_multiview_stereo_checkerboard">
            <summary>
                Checkerboard pattern
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_state_t">
            <summary>
                Note the order of libvlc_state_t enum must match exactly the order of
                \see mediacontrol_PlayerStatus, \see input_state_e enums,
                and VideoLAN.LibVLC.State (at bindings/cil/src/media.cs).
                Expected states by web plugins are:
                IDLE/CLOSE=0, OPENING=1, PLAYING=3, PAUSED=4,
                STOPPING=5, ENDED=6, ERROR=7
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_state_t.libvlc_Buffering">
            <summary>
                Deprecated value. Check the libvlc_MediaPlayerBuffering event to know the buffering state of a libvlc_media_player
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_meta_t">
            <summary>
                Meta data types
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_type_t">
            <summary>
                Media type
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_parsed_status_t">
            <summary>
                Parse status used sent by <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" /> or returned by
                <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status" />()
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t">
            <summary>
                Parse flags used by <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t.libvlc_media_parse_local">
            <summary>
                Parse media if it's a local file
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t.libvlc_media_parse_network">
            <summary>
                Parse media even if it's a network file
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t.libvlc_media_fetch_local">
            <summary>
                Fetch meta and covert art using local resources
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t.libvlc_media_fetch_network">
            <summary>
                Fetch meta and covert art using network resources
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t.libvlc_media_do_interact">
            <summary>
                Interact with the user (via libvlc_dialog_cbs) when preparsing this item
                (and not its sub items). Set this flag in order to receive a callback
                when the input is asking for credentials.
            </summary>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_new_location">
            <summary>
                Create a media with a certain given media resource location,
                for instance a valid URL.
            </summary>
            <param name="instance">the instance</param>
            <param name="psz_mrl">the media location</param>
            <remarks>
                To refer to a local file with this function,
                the file://... URI syntax <b>must</b> be used (see IETF RFC3986).
                We recommend using libvlc_media_new_path() instead when dealing with
                local files.
            </remarks>
            <returns>the newly created media or NULL on error</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_release" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_new_path">
            <summary>
                Create a media for a certain file path.
            </summary>
            <param name="instance">the instance</param>
            <param name="path">local filesystem path</param>
            <returns>the newly created media or NULL on error</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_release" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_new_callbacks">
            <summary>
                Create a media with custom callbacks to read the data from.
            </summary>
            <param name="instance">LibVLC instance</param>
            <param name="open_cb">callback to open the custom bitstream input media</param>
            <param name="read_cb">callback to read data (must not be NULL)</param>
            <param name="seek_cb">callback to seek, or NULL if seeking is not supported</param>
            <param name="close_cb">callback to close the media, or NULL if unnecessary</param>
            <param name="opaque">data pointer for the open callback</param>
            <remarks>
                If open_cb is NULL, the opaque pointer will be passed to read_cb,
                seek_cb and close_cb, and the stream size will be treated as unknown.
                <para />
                The callbacks may be called asynchronously (from another thread).
                A single stream instance need not be reentrant. However the open_cb needs to
                be reentrant if the media is used by multiple player instances.
                <para />
                The callbacks may be used until all or any player instances
                that were supplied the media item are stopped.
            </remarks>
            <returns>the newly created media or NULL on error</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_release" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_new_as_node">
            <summary>
                Create a media as an empty node with a given name.
            </summary>
            <param name="instance">the instance</param>
            <param name="psz_name">the name of the node</param>
            <returns>the new empty media or NULL on error</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_release" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_add_option">
            <summary>
                Add an option to the media.
                <para />
                This option will be used to determine how the media_player will
                read the media. This allows to use VLC's advanced
                reading/streaming options on a per-media basis.
            </summary>
            <param name="p_md">the media descriptor</param>
            <param name="psz_options">the options (as a string)</param>
            <remarks>
                The options are listed in 'vlc --long-help' from the command line,
                e.g. "-sout-all". Keep in mind that available options and their semantics
                vary across LibVLC versions and builds.
                <para />
                Not all options affects libvlc_media_t objects:
                Specifically, due to architectural issues most audio and video options,
                such as text renderer options, have no effects on an individual media.
                These options must be set through libvlc_new() instead.
            </remarks>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_add_option_flag">
            <summary>
                Add an option to the media with configurable flags.
                <para />
                This option will be used to determine how the media_player will
                read the media. This allows to use VLC's advanced
                reading/streaming options on a per-media basis.
                <para />
                The options are detailed in vlc --long-help, for instance
                "--sout-all". Note that all options are not usable on medias:
                specifically, due to architectural issues, video-related options
                such as text renderer options cannot be set on a single media. They
                must be set on the whole libvlc instance instead.
            </summary>
            <param name="p_md">the media descriptor</param>
            <param name="psz_options">the options (as a string)</param>
            <param name="i_flags">the flags for this option</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_retain">
            <summary>
                Retain a reference to a media descriptor object (libvlc_media_t). Use
                libvlc_media_release() to decrement the reference count of a
                media descriptor object.
            </summary>
            <param name="p_md">the media descriptor</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_release">
            <summary>
                Decrement the reference count of a media descriptor object. If the
                reference count is 0, then libvlc_media_release() will release the
                media descriptor object. It will send out an libvlc_MediaFreed event
                to all listeners. If the media descriptor object has been released it
                should not be used again.
            </summary>
            <param name="p_md">the media descriptor</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_mrl">
            <summary>
                Get the media resource locator (mrl) from a media descriptor object
            </summary>
            <param name="p_md">a media descriptor object</param>
            <returns>string with mrl of media descriptor object</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_duplicate">
            <summary>
                Duplicate a media descriptor object.
            </summary>
            <param name="p_md">a media descriptor object.</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_meta">
            <summary>
                Read the meta of the media.
                <para />
                If the media has not yet been parsed this will return NULL.
            </summary>
            <param name="p_md">the media descriptor</param>
            <param name="e_meta">the meta to read</param>
            <returns>the media's meta</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
            <seealso cref="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaMetaChanged" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_set_meta">
            <summary>
                Set the meta of the media (this function will not save the meta, call
                <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_save_meta" /> in order to save the meta)
            </summary>
            <param name="p_md">the media descriptor</param>
            <param name="e_meta">the meta to write</param>
            <param name="psz_value">the media's meta</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_save_meta">
            <summary>
                Save the meta previously set
            </summary>
            <param name="p_md">the media desriptor</param>
            <returns>true if the write operation was successful</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_state">
            <summary>
                Get current state of media descriptor object. Possible media states are
                libvlc_NothingSpecial=0, libvlc_Opening, libvlc_Playing, libvlc_Paused,
                libvlc_Stopped, libvlc_Ended, libvlc_Error.
            </summary>
            <param name="p_md">a media descriptor object</param>
            <returns>state of media descriptor object</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_state_t" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_stats">
            <summary>
                Get the current statistics about the media
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="p_stats">
                structure that contain the statistics about the media(this structure must be allocated by the
                caller)
            </param>
            <returns>true if the statistics are available, false otherwise</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_subitems">
            <summary>
                Get subitems of media descriptor object. This will increment
                the reference count of supplied media descriptor object. Use
                <see cref="!:libvlc_media_list_release" /> to decrement the reference counting.
            </summary>
            <param name="p_md">media descriptor object</param>
            <returns>list of media descriptor subitems or NULL</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_event_manager">
            <summary>
                Get event manager from media descriptor object.
            </summary>
            <param name="p_md">a media descriptor object</param>
            <remarks>
                this function doesn't increment reference counting.
            </remarks>
            <returns>event manager object</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_duration">
            <summary>
                Get duration (in ms) of media descriptor object item.
            </summary>
            <param name="p_md">media descriptor object</param>
            <returns>duration of media item or -1 on error</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options">
            <summary>
                Parse the media asynchronously with options.
                <para />
                This fetches (local or network) art, meta data and/or tracks information.
                <para />
                To track when this is over you can listen to <see cref="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaParsedChanged" />
                event. However if this functions returns an error, you will not receive any
                events.
                <para />
                It uses a flag to specify parse options (see <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t" />). All
                these flags can be combined. By default, media is parsed if it's a local
                file.
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="parse_flag">parse options</param>
            <param name="timeout">
                maximum time allowed to preparse the media. If -1, the
                default "preparse-timeout" option will be used as a timeout. If 0, it will
                wait indefinitely. If > 0, the timeout will be used (in milliseconds).
            </param>
            <remarks>Parsing can be aborted with <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_stop" />.</remarks>
            <returns>-1 in case of error, 0 otherwise</returns>
            <seealso cref="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaParsedChanged" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_meta" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_tracks_get" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_flag_t" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_parse_stop">
            <summary>
                Stop the parsing of the media
                <para />
                When the media parsing is stopped, the libvlc_MediaParsedChanged event will
                be sent with the libvlc_media_parsed_status_timeout status.
            </summary>
            <param name="p_md">media descriptor object</param>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_parsed_status">
            <summary>
                Get Parsed status for media descriptor object.
            </summary>
            <param name="p_md">media descriptor object</param>
            <returns>a value of the <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parsed_status_t" /> enum</returns>
            <seealso cref="F:Meta.Vlc.Interop.Core.Event.libvlc_event_e.libvlc_MediaParsedChanged" />
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_parsed_status_t" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_set_user_data">
            <summary>
                Sets media descriptor's user_data. user_data is specialized data
                accessed by the host application, VLC.framework uses it as a pointer to
                an native object that references a libvlc_media_t pointer
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="p_new_user_data">pointer to user data</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_user_data">
            <summary>
                Get media descriptor's user_data. user_data is specialized data
                accessed by the host application, VLC.framework uses it as a pointer to
                an native object that references a libvlc_media_t pointer
            </summary>
            <param name="p_md">media descriptor object</param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_tracks_get">
            <summary>
                Get media descriptor's elementary streams description
                <para />
                Note, you need to call <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />() or play the media at least once
                before calling this function.
                Not doing this will result in an empty array.
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="tracks">
                tracks address to store an allocated array of Elementary Streams
                descriptions (must be freed with <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_tracks_release" />
                by the caller) [OUT]
            </param>
            <returns>the number of Elementary Streams (zero on error)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_codec_description">
            <summary>
                Get codec description from media elementary stream
            </summary>
            <param name="i_type">i_type from <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_t" /></param>
            <param name="i_codec">i_codec or i_original_fourcc from <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_t" /></param>
            <returns>codec description</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_t" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_tracks_release">
            <summary>
                Release media descriptor's elementary streams description array
            </summary>
            <param name="p_tracks">tracks info array to release</param>
            <param name="i_count">number of elements in the array</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_get_type">
            <summary>
                Get the media type of the media descriptor object
            </summary>
            <param name="p_md">media descriptor object</param>
            <returns>media type</returns>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_type_t" />
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_add">
            <summary>
                Add a slave to the current media.
                <para />
                A slave is an external input source that may contains an additional subtitle
                track (like a .srt) or an additional audio track (like a .ac3).
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="i_type">subtitle or audio</param>
            <param name="i_priority">from 0 (low priority) to 4 (high priority)</param>
            <param name="psz_uri">Uri of the slave (should contain a valid scheme).</param>
            <remarks>
                This function must be called before the media is parsed (via
                <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_parse_with_options" />) or before the media is played (via
                <see cref="!:libvlc_media_player_play" />)
            </remarks>
            <returns>0 on success, -1 on error.</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_clear">
            <summary>
                Clear all slaves previously added by <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_add" /> or
                internally.
            </summary>
            <param name="p_md">media descriptor object</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_get">
            <summary>
                Get a media descriptor's slave list
                <para />
                The list will contain slaves parsed by VLC or previously added by
                <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_add" />. The typical use case of this function is to save
                a list of slave in a database for a later use.
            </summary>
            <param name="p_md">media descriptor object</param>
            <param name="ppp_slaves">
                address to store an allocated array of slaves (must be
                freed with <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_release" />) [OUT]
            </param>
            <returns>the number of slaves (zero on error)</returns>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_release">
            <summary>
                Release a media descriptor's slave list
            </summary>
            <param name="ppp_slaves">slave array to release</param>
            <param name="i_count">number of elements in the array</param>
        </member>
        <member name="T:Meta.Vlc.Interop.Media.libvlc_media_slave_t">
            <summary>
                A slave of a libvlc_media_t
            </summary>
            <seealso cref="T:Meta.Vlc.Interop.Media.libvlc_media_slaves_get" />
        </member>
        <!-- 对于成员“F:Meta.Vlc.Interop.Media.libvlc_video_track_t.i_multiview”忽略有格式错误的 XML 注释 -->
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_viewpoint_t.f_yaw">
            <summary>
                view point yaw in degrees  ]-180;180]
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_viewpoint_t.f_pitch">
            <summary>
                view point pitch in degrees  ]-90;90]
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_viewpoint_t.f_roll">
            <summary>
                view point roll in degrees ]-180;180]
            </summary>
        </member>
        <member name="F:Meta.Vlc.Interop.Media.libvlc_video_viewpoint_t.f_field_of_view">
            <summary>
                field of view in degrees ]0;180[ (default 80.)
            </summary>
        </member>
        <member name="T:Meta.Vlc.IUnmanagedObject">
            <summary>
                A unmanaged object.
            </summary>
        </member>
        <member name="P:Meta.Vlc.IUnmanagedObject.InstancePointer">
            <summary>
                A pointer of this unmanaged object.
            </summary>
        </member>
        <member name="T:Meta.Vlc.IVlcObject">
            <summary>
                A Vlc unmanaged object.
            </summary>
        </member>
        <member name="P:Meta.Vlc.IVlcObject.VlcInstance">
            <summary>
                A relation <see cref="T:Meta.Vlc.Vlc" /> of this object.
            </summary>
        </member>
        <member name="T:Meta.Vlc.IVlcObjectWithEvent">
            <summary>
                A Vlc unmanaged object with Vlc event system.
            </summary>
        </member>
        <member name="P:Meta.Vlc.IVlcObjectWithEvent.EventManager">
            <summary>
                Vlc event manager.
            </summary>
        </member>
        <member name="T:Meta.Vlc.MediaTrack">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_t" /> struct.
            </summary>
        </member>
        <member name="M:Meta.Vlc.MediaTrack.CreateFromPointer(Meta.Vlc.Interop.Media.libvlc_media_track_t*)">
            <summary>
                Create a media track from a pointer, it will distinguish type of media track auto.
            </summary>
            <param name="pointer">pointer of media track</param>
            <returns>a audio track, video track, subtitle track or unknown track</returns>
        </member>
        <member name="T:Meta.Vlc.AudioTrack">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_audio_track_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.VideoTrack">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_video_track_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.SubtitleTrack">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_subtitle_track_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.UnknownTrack">
            <summary>
                A wrapper for other media track.
            </summary>
        </member>
        <member name="T:Meta.Vlc.MediaTrackList">
            <summary>
                A list wrapper for <see cref="T:Meta.Vlc.Interop.Media.libvlc_media_track_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.ModuleDescription">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.ModuleDescriptionList">
            <summary>
                A list wrapper for <see cref="T:Meta.Vlc.Interop.Core.libvlc_module_description_t" /> linked list struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.PresetAudioEqualizerType">
            <summary>
                Preset audio equlizer type.
            </summary>
        </member>
        <member name="T:Meta.Vlc.Size">
            <summary>
                A struct with width and height, for downward compatibility.
            </summary>
        </member>
        <member name="T:Meta.Vlc.TrackDescription">
            <summary>
                A wrapper for <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_t" /> struct.
            </summary>
        </member>
        <member name="T:Meta.Vlc.TrackDescriptionList">
            <summary>
                A list wrapper for <see cref="T:Meta.Vlc.Interop.MediaPlayer.libvlc_track_description_t" /> linked list struct.
            </summary>
        </member>
        <member name="M:Meta.Vlc.Vlc.#ctor">
            <summary>
                Create a Vlc instance by default options.
            </summary>
            <exception cref="T:Meta.Vlc.VlcCreateFailException">Can't create a Vlc instance, check your Vlc options.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Meta.Vlc.Vlc.#ctor(System.String[])">
            <summary>
                Create a Vlc instance by options.
            </summary>
            <param name="argv"></param>
            <exception cref="T:Meta.Vlc.VlcCreateFailException">Can't create a Vlc instence, check your Vlc options.</exception>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Meta.Vlc.Vlc.AddInterface(System.String)">
            <summary>
                Try to start a user interface for the libvlc instance.
            </summary>
            <param name="name">interface name, or NULL for default</param>
            <returns>true on success, false on error.</returns>
        </member>
        <member name="M:Meta.Vlc.Vlc.SetUserAgent(System.String,System.String)">
            <summary>
                Sets the application name. LibVLC passes this as the user agent string when a protocol requires it.
            </summary>
            <param name="name">human-readable application name, e.g. "FooBar player 1.2.3"</param>
            <param name="http">HTTP User Agent, e.g. "FooBar/1.2.3 Python/2.6.0"</param>
        </member>
        <member name="M:Meta.Vlc.Vlc.SetAppId(System.String,System.String,System.String)">
            <summary>
                Sets some meta-information about the application.
            </summary>
            <param name="id">Java-style application identifier, e.g. "com.acme.foobar"</param>
            <param name="version">application version numbers, e.g. "1.2.3"</param>
            <param name="icon">application icon name, e.g. "foobar"</param>
        </member>
        <member name="M:Meta.Vlc.Vlc.GetAudioFilterList">
            <summary>
                Returns a list of audio filters that are available.
            </summary>
        </member>
        <member name="M:Meta.Vlc.Vlc.GetVideoFilterList">
            <summary>
                Returns a list of video filters that are available.
            </summary>
        </member>
        <member name="M:Meta.Vlc.Vlc.CreateMediaAsNewNode(System.String)">
            <summary>
                通过名称创建一个新的 VlcMedia
            </summary>
            <param name="name">媒体名称</param>
        </member>
        <member name="M:Meta.Vlc.Vlc.CreateMediaFromLocation(System.String)">
            <summary>
                通过给定的文件 Url 创建一个新的 VlcMedia,该 Url 的格式必须以 "file://" 开头,参见 "RFC3986".
            </summary>
            <param name="url">文件 Url</param>
        </member>
        <member name="M:Meta.Vlc.Vlc.CreateMediaFromPath(System.String)">
            <summary>
                通过给定的文件路径创建一个新的 VlcMedia
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:Meta.Vlc.VlcError.GetErrorMessage">
            <summary>
                Get a readable error message.
            </summary>
            <returns>return a readable LibVlc error message, if there are no error will return <see cref="!:null" /></returns>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="M:Meta.Vlc.VlcError.CleanError">
            <summary>
                Clear error message of current thread.
            </summary>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="T:Meta.Vlc.VlcEventManager">
            <summary>
                A manager of LibVlc event system.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcEventManager.#ctor(Meta.Vlc.IVlcObject,System.Void*)">
            <summary>
                Create a event manager with parent Vlc object and pointer of event manager.
            </summary>
            <param name="parentVlcObject"></param>
            <param name="pointer"></param>
        </member>
        <member name="P:Meta.Vlc.VlcEventManager.InstancePointer">
            <summary>
                Pointer of this event manager.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcEventManager.VlcInstance">
            <summary>
                A relation <see cref="T:Meta.Vlc.Vlc" /> of this object.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcEventManager.Attach(Meta.Vlc.EventType)">
            <summary>
                Attach a event with a callback.
            </summary>
            <param name="type">event type</param>
        </member>
        <member name="M:Meta.Vlc.VlcEventManager.Detach(Meta.Vlc.EventType)">
            <summary>
                Deattach a event with a callback.
            </summary>
            <param name="type">event type</param>
        </member>
        <member name="M:Meta.Vlc.VlcEventManager.GetEventTypeName(Meta.Vlc.EventType)">
            <summary>
                Get event type name.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Vlc.LibVlcManager">
            <summary>
                LibVlc dlls manager, load LibVlc and initialize LibVlc to use. Some public method also in this class, like
                <see cref="M:Meta.Vlc.LibVlcManager.Free(System.Void*)" /> method.
            </summary>
        </member>
        <member name="P:Meta.Vlc.LibVlcManager.IsLibLoaded">
            <summary>
                LibVlc loaded or not.
            </summary>
        </member>
        <member name="P:Meta.Vlc.LibVlcManager.LibVlcHandle">
            <summary>
                Handle of libvlc.dll.
            </summary>
        </member>
        <member name="P:Meta.Vlc.LibVlcManager.LibVlcVCoreHandle">
            <summary>
                Handle of libvlccore.dll.
            </summary>
        </member>
        <member name="P:Meta.Vlc.LibVlcManager.LibVlcDirectory">
            <summary>
                Directory of LibVlc dlls.
            </summary>
        </member>
        <member name="P:Meta.Vlc.LibVlcManager.LibVlcVersion">
            <summary>
                Version infomation of LibVlc.
            </summary>
        </member>
        <member name="M:Meta.Vlc.LibVlcManager.LoadLibVlc(System.String)">
            <summary>
                Load LibVlc dlls, and mapping all function.
            </summary>
            <param name="libVlcDirectory">directory of LibVlc</param>
            <exception cref="T:Meta.Vlc.LibVlcLoadLibraryException">
                Can't load LibVlc dlls, check the platform and LibVlc target platform
                (should be same, x86 or x64).
            </exception>
            <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded. </exception>
            <exception cref="T:Meta.Vlc.NoLibVlcFunctionAttributeException">
                For LibVlcFunction, need LibVlcFunctionAttribute to get Infomation
                of function.
            </exception>
            <exception cref="T:Meta.Vlc.FunctionNotFoundException">Can't find function in dll.</exception>
            <exception cref="T:Meta.Vlc.VersionStringParseException">Can't parse libvlc version string, it must like "2.2.0-Meta Weatherwax".</exception>
            <exception cref="T:System.OverflowException">
                At least one component of version represents a number greater than
                <see cref="F:System.Int32.MaxValue" />.
            </exception>
        </member>
        <member name="M:Meta.Vlc.LibVlcManager.GetVersion">
            <summary>
                Get version string of LibVlc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.LibVlcManager.GetCompiler">
            <summary>
                Get compiler infomation of LibVlc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.LibVlcManager.GetChangeSet">
            <summary>
                Get changeset of LibVlc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.LibVlcManager.Free(System.Void*)">
            <summary>
                Frees an heap allocation returned by a LibVLC function, like ANSI C free() method.
            </summary>
            <param name="pointer">the pointer of object to be released </param>
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
        </member>
        <member name="T:Meta.Vlc.VlcMedia">
            <summary>
                The API wrapper of LibVlc media.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.Duration">
            <summary>
                Get duration of media descriptor object item.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.Mrl">
            <summary>
                Get the media resource locator (mrl) from a media descriptor object.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.State">
            <summary>
                Get current state of media descriptor object.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.Stats">
            <summary>
                Get the current statistics about the media
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.UserData">
            <summary>
                Get media descriptor's user_data. user_data is specialized data
                accessed by the host application, VLC.framework uses it as a pointer to
                an native object that references a <see cref="T:Meta.Vlc.VlcMedia" /> pointer.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.ParsedStatus">
            <summary>
                Get Parsed status for media descriptor object.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMedia.SubItems">
            <summary>
                Get sub items of media descriptor object. This will increment
                the reference count of supplied media descriptor object. Use
                libvlc_media_list_release to decrement the reference counting.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.CreateAsNewNode(Meta.Vlc.Vlc,System.String)">
            <summary>
                Create a media as an empty node with a given name
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.CreateFormLocation(Meta.Vlc.Vlc,System.String)">
            <summary>
                Create a media with a certain given media resource location,
                for instance a valid URL.
                <para />
                To refer to a local file with this function,
                the file://... URI syntax <b>must</b> be used (see IETF RFC3986).
                We recommend using <see cref="M:Meta.Vlc.VlcMedia.CreateFormPath(Meta.Vlc.Vlc,System.String)" /> instead when dealing with local files.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.CreateFormPath(Meta.Vlc.Vlc,System.String)">
            <summary>
                Create a media for a certain file path.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.AddOption(System.String[])">
            <summary>
                Add an option to the media.
                <para />
                This option will be used to determine how the <see cref="T:Meta.Vlc.VlcMediaPlayer" /> will
                read the media. This allows to use VLC's advanced
                reading/streaming options on a per-media basis.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.AddOption(System.String,System.UInt32)">
            <summary>
                Add an option to the media with configurable flags.
                <para />
                This option will be used to determine how the <see cref="T:Meta.Vlc.VlcMediaPlayer" /> will
                read the media. This allows to use VLC's advanced
                reading/streaming options on a per-media basis.
                <para />
                The options are detailed in vlc --long-help, for instance
                "--sout-all". Note that all options are not usable on medias:
                specifically, due to architectural issues, video-related options
                such as text renderer options cannot be set on a single media. They
                must be set on the whole libvlc instance instead.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.Duplicate">
            <summary>
                Duplicate a media descriptor object.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.GetCodecDescription(Meta.Vlc.TrackType,System.UInt32)">
            <summary>
                Get codec description from media elementary stream
            </summary>
            <param name="type">
                <see cref="P:Meta.Vlc.MediaTrack.Type" />
            </param>
            <param name="codec"><see cref="P:Meta.Vlc.MediaTrack.OriginalFourcc" /> or <see cref="P:Meta.Vlc.MediaTrack.Codec" /></param>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.GetMeta(Meta.Vlc.MediaMetaType)">
            <summary>
                Read the meta of the media.
                <para />
                If the media has not yet been parsed this will return NULL.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.GetTrackInfo">
            <summary>
                Get media descriptor's elementary streams description
                <para />
                Note, you need to call <see cref="!:ParseWithOptionAsync" /> or play the media at least once
                before calling this function.
                Not doing this will result in an empty list.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.ParseWithOption(Meta.Vlc.MediaParseOption,System.Int32)">
            <summary>
                Parse the media asynchronously with options.
                <para />
                This fetches (local or network) art, meta data and/or tracks information.
                <para />
                To track when this is over you can listen to <see cref="E:Meta.Vlc.VlcMedia.ParsedChanged" />
                event. However if this functions returns an error, you will not receive any
                events.
                <para />
                It uses a flag to specify parse options (see <see cref="T:Meta.Vlc.MediaParseOption" />). All
                these flags can be combined. By default, media is parsed if it's a local
                file.
            </summary>
            <param name="option">parse options</param>
            <param name="timeout">
                maximum time allowed to preparse the media. If -1, the
                default "preparse-timeout" option will be used as a timeout. If 0, it will
                wait indefinitely. If > 0, the timeout will be used (in milliseconds).
            </param>
            <remarks>Parsing can be aborted with <see cref="M:Meta.Vlc.VlcMedia.StopParse" />.</remarks>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.StopParse">
            <summary>
                Stop the parsing of the media
                <para />
                When the media parsing is stopped, the <see cref="E:Meta.Vlc.VlcMedia.ParsedChanged" /> event will
                be sent with the <see cref="F:Meta.Vlc.MediaParsedStatus.Timeout" /> status.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.SaveMeta">
            <summary>
                Save the meta previously set
            </summary>
            <returns>true if the write operation was successful</returns>
        </member>
        <member name="M:Meta.Vlc.VlcMedia.SetMeta(Meta.Vlc.MediaMetaType,System.String)">
            <summary>
                Set the meta of the media (this function will not save the meta, call
                <see cref="M:Meta.Vlc.VlcMedia.SaveMeta" /> in order to save the meta)
            </summary>
        </member>
        <member name="T:Meta.Vlc.VlcMediaPlayer">
            <summary>
                The lowest layer API wrapper of LibVlc media player.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Media">
            <summary>
                Get the media used by the media_player.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.IsPlaying">
            <summary>
                is playing
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Position">
            <summary>
                Get or set movie position as percentage between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Hwnd">
            <summary>
                Get or set the Windows API window handle (HWND). The handle will be returned even if LibVLC
                is not currently outputting any video to it.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Length">
            <summary>
                Get the current movie length.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Time">
            <summary>
                Get or set the current movie time.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Chapter">
            <summary>
                Get or set movie chapter.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.ChapterCount">
            <summary>
                Get movie chapter count
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.CanPlay">
            <summary>
                Is the player able to play
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Title">
            <summary>
                Get or set movie title
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.TitleCount">
            <summary>
                Get movie title count
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Rate">
            <summary>
                Get or set the requested movie play rate.
                <para />
                Depending on the underlying media, the requested rate may be
                different from the real playback rate.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.State">
            <summary>
                Get current movie state
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.VideoOutCount">
            <summary>
                How many video outputs does this media player have?
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.IsSeekable">
            <summary>
                Is this media player seekable?
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.CanPause">
            <summary>
                Can this media player be paused?
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.Volume">
            <summary>
                Get or set current software audio volume.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.IsMute">
            <summary>
                Get or set current mute status.
                <para />
                warning: This function does not always work. If there are no active audio
                playback stream, the mute status might not be available. If digital
                pass-through (S/PDIF, HDMI...) is in use, muting may be unapplicable. Also
                some audio output plugins do not support muting at all.
                note: To force silent playback, disable all audio tracks. This is more
                efficient and reliable than mute.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.AudioOutputChannel">
            <summary>
                Get or set current audio channel.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.AudioTrackCount">
            <summary>
                Get number of available audio tracks.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.AudioTrack">
            <summary>
                Get or set current audio track.
            </summary>
        </member>
        <member name="P:Meta.Vlc.VlcMediaPlayer.AudioTrackDescription">
            <summary>
                Get the description of available audio tracks.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.SetEqualizer(Meta.Vlc.AudioEqualizer)">
            <summary>
                Apply new equalizer settings to a media player.
                <para />
                The media player does not keep a reference to the supplied equalizer so you should set it again when you changed
                some value of equalizer.
                <para />
                After you set equalizer you can dispose it. if you want to disable equalizer set it to <see cref="!:null" />.
            </summary>
            <param name="equalizer"></param>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.EnumAudioDeviceList">
            <summary>
                Gets a list of potential audio output devices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.GetAudioDeviceList(Meta.Vlc.AudioOutput)">
            <summary>
                Gets a list of audio output devices for a given audio output module.
            </summary>
            <param name="audioOutput"></param>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.GetAudioOutputList">
            <summary>
                Gets the list of available audio output modules.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.SetAudioOutput(Meta.Vlc.AudioOutput)">
            <summary>
                Selects an audio output module.
                Any change will take be effect only after playback is stopped and restarted. Audio output cannot be changed while
                playing.
            </summary>
            <param name="audioOutput"></param>
            <returns></returns>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.GetAudioDevice">
            <summary>
                Get the current audio output device identifier.
            </summary>
        </member>
        <member name="M:Meta.Vlc.VlcMediaPlayer.SetAudioDevice(Meta.Vlc.AudioOutput,Meta.Vlc.AudioDevice)">
            <summary>
                Configures an explicit audio output device. If the module paramater is NULL,
                audio output will be moved to the device specified by the device identifier string immediately.
                This is the recommended usage. A list of adequate potential device strings can be obtained with
                <see cref="M:Meta.Vlc.VlcMediaPlayer.EnumAudioDeviceList" />.
                However passing NULL is supported in LibVLC version 2.2.0 and later only; in earlier versions, this function would
                have no effects when the module parameter was NULL.
                If the module parameter is not NULL, the device parameter of the corresponding audio output, if it exists, will be
                set to the specified string.
                Note that some audio output modules do not have such a parameter (notably MMDevice and PulseAudio).
                A list of adequate potential device strings can be obtained with <see cref="M:Meta.Vlc.VlcMediaPlayer.GetAudioDeviceList(Meta.Vlc.AudioOutput)" />.
            </summary>
        </member>
        <member name="T:Meta.Vlc.Win32Api">
            <summary>
                Some method of Win32 APIs.
            </summary>
        </member>
        <member name="M:Meta.Vlc.Win32Api.LoadLibrary(System.String)">
            <summary>
                进程调用 LoadLibrary 以显式链接到 DLL,如果函数执行成功,它会将指定的 DLL 映射到调用进程的地址空间中并返回该 DLL 的句柄,此句柄可以与其他函数(如 GetProcAddress 和
                FreeLibrary)一起在显式链接中使用
                LoadLibrary 将尝试使用用于隐式链接的相同搜索序列来查找 DLL.如果系统无法找到所需的 DLL 或者入口点函数返回 FALSE.则 LoadLibrary 将抛出异常.如果对 LoadLibrary 的调用所指定的
                DLL 模块已映射到调用进程的地址空间中,则该函数将返回该 DLL 的句柄并递增模块的引用数
            </summary>
            <param name="lpFileName">DLL 模块地址</param>
            <returns>返回 DLL 模块句柄,如果出错将抛出异常</returns>
        </member>
        <member name="M:Meta.Vlc.Win32Api.GetProcAddress(System.IntPtr,System.String)">
            <summary>
                显式链接到 DLL 的进程调用 GetProcAddress 来获取 DLL 导出函数的地址,由于是通过指针调用 DLL 函数并且没有编译时类型检查,需确保函数的参数是正确的,以便不会超出在堆栈上分配的内存和不会导致访问冲突
            </summary>
            <param name="hModule">DLL 模块句柄</param>
            <param name="lpProcName">调用的函数名</param>
            <returns>返回函数地址</returns>
        </member>
        <member name="M:Meta.Vlc.Win32Api.FreeLibrary(System.IntPtr)">
            <summary>
                不再需要 DLL 模块时,显式链接到 DLL 的进程调用 FreeLibrary 函数.此函数递减模块的引用数,如果引用数为零,此函数便从进程的地址空间中取消模块的映射
            </summary>
            <param name="hModule">DLL 模块句柄</param>
            <returns>如果成功会返回 true ,否则会返回 false,请通过 GetLastError 获取更多信息</returns>
        </member>
        <member name="M:Meta.Vlc.Win32Api.CreateFileMapping(System.IntPtr,System.IntPtr,Meta.Vlc.PageAccess,System.Int32,System.Int32,System.String)">
            <summary>
                创建一个新的文件映射内核对象
            </summary>
            <param name="hFile">指定欲在其中创建映射的一个文件句柄,为0xFFFFFFFF则表示创建一个内存文件映射</param>
            <param name="lpAttributes">它指明返回的句柄是否可以被子进程所继承,使用 NULL 表示使用默认安全设置</param>
            <param name="flProtect">指定文件映射对象的页面保护</param>
            <param name="dwMaximumSizeHigh">表示映射文件大小的高32位</param>
            <param name="dwMaximumSizeLow">表示映射文件大小的低32位</param>
            <param name="lpName">指定文件映射对象的名字,如果为 NULL 则会创建一个无名称的文件映射对象</param>
            <returns>返回文件映射对象指针,如果错误将返回 NULL,请通过 GetLastError 获取更多信息</returns>
        </member>
        <member name="M:Meta.Vlc.Win32Api.MapViewOfFile(System.IntPtr,Meta.Vlc.FileMapAccess,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                将一个文件映射对象映射到当前应用程序的地址空间
            </summary>
            <param name="hFileMappingObject">文件映射对象的句柄</param>
            <param name="dwDesiredAccess">映射对象的文件数据的访问方式,而且同样要与 CreateFileMapping 函数所设置的保护属性相匹配</param>
            <param name="dwFileOffsetHigh">表示文件映射起始偏移的高32位</param>
            <param name="dwFileOffsetLow">表示文件映射起始偏移的低32位</param>
            <param name="dwNumberOfBytesToMap">指定映射文件的字节数</param>
            <returns>返回文件映射在内存中的起始地址,如果错误将返回 NULL,请通过 GetLastError 获取更多信息</returns>
        </member>
        <member name="M:Meta.Vlc.Win32Api.CloseHandle(System.IntPtr)">
            <summary>
                关闭一个内核对象.其中包括文件,文件映射,进程,线程,安全和同步对象等
            </summary>
            <param name="handle">欲关闭的一个对象的句柄</param>
            <returns>如果成功会返回 true ,否则会返回 false,请通过 GetLastError 获取更多信息</returns>
        </member>
    </members>
</doc>
